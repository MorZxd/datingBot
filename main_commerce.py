import telebot
from random import choice,randint
from telebot import types
import sqlite3
from datetime import datetime
import time
import smtplib
from email.mime.text import MIMEText
from geopy.geocoders import Nominatim
from validate_email import validate_email #pip install py3dns (?)
from email_check_and_send import my_valid_email, send_verification_email

geolocator = Nominatim(user_agent="city_validator") #city validator

#–°–æ–∑–¥–∞–µ–º –ë–î

conn = sqlite3.connect('users.db', check_same_thread=False)

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS user_profiles (
            user_id INTEGER PRIMARY KEY,
            city TEXT,
            min_age INTEGER,
            max_age INTEGER,
            email TEXT,
            gender INTEGER,
            preferences INTEGER,
            name TEXT,
            age TEXT,
            balance INTEGER DEFAULT 0,
            photo BLOB,
            bio TEXT,
            status_dating INTEGER,
            last_online TEXT,
            amount_of_wins INTEGER DEFAULT 0,
            amount_of_pars INTEGER DEFAULT 0,
            subscribe INTEGER,
            last_email_send INTEGER,
            status_ban TEXT DEFAULT norm
        )
    ''')

#—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –ë–î 

with conn: 
    conn.execute('''
        CREATE TABLE IF NOT EXISTS votes (
            user_id INTEGER,
            battle_id INTEGER,
            vote_side TEXT,  -- 'left' –∏–ª–∏ 'right'
            PRIMARY KEY (user_id, battle_id)
        )
    ''')
    
with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS evaluations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            evaluator_id INTEGER,
            evaluated_id INTEGER,
            evaluation_date TEXT,
            FOREIGN KEY (evaluator_id) REFERENCES user_profiles(user_id),
            FOREIGN KEY (evaluated_id) REFERENCES user_profiles(user_id)
        );
    ''')
    conn.commit()

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS battle_queue (
        user_id INTEGER PRIMARY KEY,
        join_time INTEGER
        );
    ''')
    
with conn:
    conn.execute('''CREATE TABLE IF NOT EXISTS battles (
    battle_id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_1 INTEGER,
    participant_2 INTEGER,
    participant_1_photo BLOB,  -- –§–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant_2_photo BLOB,  -- –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    start_time INTEGER,
    end_time INTEGER,
    votes_participant_1 INTEGER DEFAULT 0,
    votes_participant_2 INTEGER DEFAULT 0,
    winner INTEGER,
    status TEXT DEFAULT 'active',
    FOREIGN KEY (participant_1) REFERENCES user_profiles(user_id),
    FOREIGN KEY (participant_2) REFERENCES user_profiles(user_id)
    );
    ''')

with conn:
    conn.execute("""
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            referred_user_id INTEGER NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS referral_rewards (
            user_id INTEGER PRIMARY KEY,
            referral_count INTEGER DEFAULT 0
        );
    """)

#–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
genders = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_m = types.KeyboardButton('–ü–∞—Ä–µ–Ω—å')
but_j = types.KeyboardButton('–î–µ–≤—É—à–∫–∞')
genders.add(but_m,but_j)


start_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_znakomstva = types.KeyboardButton('–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚ù§Ô∏è')
but_battle = types.KeyboardButton('–ë–∞—Ç—Ç–ª –§–æ—Ç–æ üî•')
but_settings = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
start_menu.add(but_znakomstva,but_battle, but_settings)

but_back = types.KeyboardButton('–ù–∞–∑–∞–¥')

dating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_anket = types.KeyboardButton('–ú–æ—è –ê–Ω–∫–µ—Ç–∞')
but_find = types.KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
dating_menu.add(but_my_anket, but_find, but_back)

looking_for_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_girl = types.KeyboardButton('–î–µ–≤—É—à–∫–∏')
but_boy = types.KeyboardButton('–ü–∞—Ä–Ω–∏')
but_dont_matter = types.KeyboardButton('–ù–µ –≤–∞–∂–Ω–æ')
looking_for_menu.add(but_girl,but_boy,but_dont_matter)

battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_profile = types.KeyboardButton('–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å')
but_list_battles = types.KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –ë–∞—Ç—Ç–ª—ã')
but_participation = types.KeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –£—á–∞—Å—Ç–∏–µ')
but_my_battles = types.KeyboardButton('–ú–æ–∏ –ë–∞—Ç—Ç–ª—ã')
but_top_5 = types.KeyboardButton('–¢–æ–ø 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
battle_menu.add(but_my_profile, but_list_battles, but_participation, but_my_battles, but_top_5, but_back)

rating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_like = types.KeyboardButton('–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
but_dislike = types.KeyboardButton('–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è')
but_to_anket = types.KeyboardButton('–ö –ê–Ω–∫–µ—Ç–µ')
rating_menu.add(but_like,but_dislike,but_to_anket)

curr_battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_first = types.KeyboardButton('–°–ª–µ–≤–∞ –ª—É—á—à–µ!')
but_sec = types.KeyboardButton('–°–ø—Ä–∞–≤–∞ –ª—É—á—à–µ!')
but_to_menu = types.KeyboardButton('–í –º–µ–Ω—é')
curr_battle_menu.add(but_first, but_sec, but_to_menu)

univs = types.InlineKeyboardMarkup()
but_mirea = types.InlineKeyboardButton(f'–†–¢–£ –ú–ò–†–≠–ê', callback_data='univ_mirea')
but_hse = types.InlineKeyboardButton(f'–ù–ò–£ –í–®–≠', callback_data='univ_hse')
univs.add(but_mirea, but_hse)

markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_change_anket = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
but_referals = types.KeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
but_balance = types.KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
markup_settings.add(but_change_anket, but_referals, but_balance, but_back)

markup_change_anket = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_name = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
but_city = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
but_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç')
but_prefer_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
but_gender = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª')
but_photo = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ')
markup_change_anket.add(but_photo, but_name, but_age, but_city, but_prefer_age, but_gender, but_back)


markup_referals = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_referals = types.KeyboardButton('üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞')
markup_referals.add(but_referals, "üèÜ–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã", "üî¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", but_back)

#define bot
bot = telebot.TeleBot('')

#define token for pay
TELEGRAM_PROVIDER_TOKEN = ""

ADMIN_CHAT_ID = 6670128924 #–ö–∞—Ç—è –¥–æ–ø –∞–∫–∫–∞—É–Ω—Ç

#–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
user_states = {} #–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. user_states[user_id] = 'wait bio' => —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—å, –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
verif_codes = {} #—Ç—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
payloads_ids = {} #—Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–ª–∞—Ç–µ–∂–µ–π —é–∑–µ—Ä–æ–≤ 


#------------------------------------------------------------------------------------------------------------------------------------------
#–°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
#------------------------------------------------------------------------------------------------------------------------------------------

#–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–∞, –∏–ª–∏ –µ–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
def is_profile_exists(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    with conn:
        result = conn.execute('''
            SELECT name, photo, gender, bio, age, city 
            FROM user_profiles 
            WHERE user_id = ?
        ''', (user_id,)).fetchone()
    if result:
        name, photo, gender, bio, age, city = result
        if name and photo and (gender == 1 or gender == 2) and bio and age and city:
            return True
        else:
            bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')
            return False
    else:
        bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')
        return False

    
#–ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç. –µ–≥–æ —Å—Ç–∞—Ç—É—Å –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î. 
def get_status(user_id):
    with conn:
        res1 = conn.execute('SELECT status_ban FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if res1:
        return res1[0]
    else:
        return 'norm'
    
#–ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é –ø–æ—á—Ç—É 
def is_profile_verified(user_id):
    with conn:
        email = conn.execute('SELECT email FROM user_profiles WHERE user_id = ?',(user_id,)).fetchone()
    if email != (None,) and email != None:
        return True
    else:
        return False
        
#–ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∞—Å—Ç –æ–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ª–∞—Å—Ç –æ–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ.
def update_last_online(message):
    user_id = message.from_user.id
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with conn:
        result = conn.execute('SELECT user_id FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if result is None:
        with conn:
            conn.execute('''
                INSERT INTO user_profiles (user_id) VALUES (?)
            ''', (user_id,))
    with conn:
        conn.execute('''
            UPDATE user_profiles
            SET last_online = ?
            WHERE user_id = ?
        ''', (current_time, user_id))
        conn.commit()
        
def get_name(message, is_edit):
    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–µ–Ω–∏")
        bot.register_next_step_handler(message, get_name, is_edit)
        return
    name = message.text
    if len(name) >= 25:
        bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, get_name, is_edit)
        return
    with conn:
                        conn.execute('''
        UPDATE user_profiles
        SET name = ?
        WHERE user_id = ?
    ''', (name, message.from_user.id))
    if is_edit:
        bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! {name}, —Ç—ã –ü–∞—Ä–µ–Ω—å –∏–ª–∏ –î–µ–≤—É—à–∫–∞?',reply_markup = genders)
        bot.register_next_step_handler(message, get_gender, is_edit = False)

def get_gender(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        gender = message.text
        gender = gender.lower()
        if gender != '–ø–∞—Ä–µ–Ω—å' and gender != '–¥–µ–≤—É—à–∫–∞':
            bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º: –ü–∞—Ä–µ–Ω—å –≤—ã –∏–ª–∏ –î–µ–≤—É—à–∫–∞',reply_markup = genders)
            bot.register_next_step_handler(message, get_gender, is_edit)
            return 
        else:
            if gender == '–ø–∞—Ä–µ–Ω—å':
                gender = 1
                with conn:
                    conn.execute('''
                    UPDATE user_profiles
                    SET gender = ?
                    WHERE user_id = ?
                ''', (gender,user_id))
            else:
                gender = 2
                with conn:
                    conn.execute('''
                    UPDATE user_profiles
                    SET gender = ?
                    WHERE user_id = ?
                ''', (gender,user_id))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
        else:
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –ª—é–¥–∏ –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã\n–î–µ–≤—É—à–∫–∏/–ü–∞—Ä–Ω–∏/–ù–µ –≤–∞–∂–Ω–æ',reply_markup = looking_for_menu)
            bot.register_next_step_handler(message, get_prefs, is_edit)
    else:
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ: –ü–∞—Ä–µ–Ω—å –≤—ã –∏–ª–∏ –î–µ–≤—É—à–∫–∞',reply_markup = genders)
        bot.register_next_step_handler(message, get_gender, is_edit)
        return 
        
def get_prefs(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        prefers = message.text
        prefers = prefers.lower()
        if prefers not in ['–¥–µ–≤—É—à–∫–∏','–ø–∞—Ä–Ω–∏','–Ω–µ –≤–∞–∂–Ω–æ']:
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n–î–µ–≤—É—à–∫–∏\n–ü–∞—Ä–Ω–∏\n–ù–µ –≤–∞–∂–Ω–æ',reply_markup=looking_for_menu)
            bot.register_next_step_handler(message, get_prefs, is_edit)
            return 
        with conn:
            if prefers == "–ø–∞—Ä–Ω–∏":
                conn.execute('UPDATE user_profiles SET preferences = 1 WHERE user_id = ?', (user_id,))
            elif prefers == "–¥–µ–≤—É—à–∫–∏":
                conn.execute('UPDATE user_profiles SET preferences = 2 WHERE user_id = ?', (user_id,))
            elif prefers == "–Ω–µ –≤–∞–∂–Ω–æ":
                conn.execute('UPDATE user_profiles SET preferences = 3 WHERE user_id = ?', (user_id,))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
        else:
            bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ',reply_markup = types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_bio, is_edit)
    else:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n–î–µ–≤—É—à–∫–∏\n–ü–∞—Ä–Ω–∏\n–ù–µ –≤–∞–∂–Ω–æ',reply_markup=looking_for_menu)
        bot.register_next_step_handler(message, get_prefs, is_edit)
        return

def get_bio(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        bio = message.text
        if len(bio) >= 150:
            bot.send_message(chat_id, '–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 150 —Å–∏–º–≤–æ–ª–æ–≤')
            bot.register_next_step_handler(message, get_bio, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET bio = ?
            WHERE user_id = ?
        ''', (bio,user_id))
        if is_edit:
            bot.send_message(f'–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
        else:
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
            bot.register_next_step_handler(message, get_age, is_edit)
    else:
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º')
        bot.register_next_step_handler(message, get_bio, is_edit)
        return 

def get_age(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        age = message.text
        if not(age.isdigit()) or int(age)<=10 or int(age) >= 150:
            bot.send_message(chat_id,'–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
            bot.register_next_step_handler(message, get_age, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET age = ?
            WHERE user_id = ?
            ''', (age,user_id))
        if is_edit:
            bot.send_message(f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
        else:
            bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤—ã –∏—â–∏—Ç–µ –ª—é–¥–µ–π\n–ù–∞–ø–∏—à–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ\n\n–ü—Ä–∏–º–µ—Ä: 20 30\n–û–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ –ª—é–¥–µ–π –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ—Ç 20 –¥–æ 30 –ª–µ—Ç –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
    else:
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
        bot.register_next_step_handler(message, get_age, is_edit)
        return

def get_pref_age(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        text = message.text
        if len(text.split()) != 2:
            bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        age1,age2 = text.split()
        if not(age1.isdigit()) or not(age2.isdigit()):
            bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        if int(age1) <= 10 or int(age1)>150 or int(age2)<=10 or int(age2)>150:
            bot.send_message(chat_id, f'–û–±–∞ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª–µ–µ 10, –∏ –º–µ–Ω–µ–µ 150')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return
        elif int(age1)>int(age2):
            bot.send_message(chat_id, f'–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞, –æ–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET min_age = ?, max_age = ?
            WHERE user_id = ?
            ''', (age1,age2, user_id))
        if is_edit:
            bot.send_message(f'–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
        else:
            bot.send_message(chat_id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞/–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–∏—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –õ—É—á—à–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –ø–æ–∏—Å–∫–µ –ú–æ—Å–∫–≤–∞ ‚â† Moscow')
            bot.register_next_step_handler(message, get_city, is_edit)
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        bot.register_next_step_handler(message, get_pref_age, is_edit)

def get_city(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        text = message.text
        loc = geolocator.geocode(text)
        if loc:
            text = text.title()
            with conn:
                        conn.execute('''
                UPDATE user_profiles
                SET city = ?
                WHERE user_id = ?
            ''', (text, user_id))
            if is_edit:
                bot.send_message(f'–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
            else:
                bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ')
                bot.register_next_step_handler(message, get_photo, is_edit)
        else:
            bot.send_message(chat_id, f'–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –≤–∞–º –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
            bot.register_next_step_handler(message, get_city, is_edit)
            return 
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º')
        bot.register_next_step_handler(message, get_city, is_edit)
        return 

def get_photo(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET photo = ?
            WHERE user_id = ?
        ''', (downloaded_file,user_id))
        if is_edit:
            bot.reply_to(message, "–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!",reply_markup = start_menu)
        else:
            bot.reply_to(message, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!",reply_markup = start_menu)
    else:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–æ—Ç–æ',reply_markup = types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_photo, is_edit)
        return 

def add_referral(referrer_id, referred_id):
    with conn:
        # all_amount = conn.execute("""
        #     SELECT COUNT(*) FROM referrals WHERE user_id = ? AND referred_user_id = ?
        # """, (referrer_id, referred_id))
        is_user_exists = conn.execute("""
            SELECT COUNT(*) FROM user_profiles WHERE user_id = ?
        """, (referred_id,)).fetchone()[0]
        if is_user_exists:
            bot.send_message(referred_id, f'–í—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞.')
            return
        conn.execute("INSERT INTO referrals (user_id, referred_user_id) VALUES (?, ?)", (referrer_id, referred_id))
        conn.execute("""
            INSERT INTO referral_rewards (user_id, referral_count)
            VALUES (?, 1)
            ON CONFLICT(user_id) DO UPDATE SET referral_count = referral_count + 1
        """, (referrer_id,))
        bot.send_message(referred_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        bot.send_message(referrer_id, f"–ö –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!")

#------------------------------------------------------------------------------------------------------------------------------------------
#–§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ù–ê–ö–û–ú–°–¢–í
#------------------------------------------------------------------------------------------------------------------------------------------

#–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω—è–µ—Ç —á—å—é-—Ç–æ –∞–Ω–∫–µ—Ç—É, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–µ —Å–Ω–æ–≤–∞
def mark_as_viewed(user_id, match_id):
    with conn:
        conn.execute('''
            INSERT INTO evaluations (evaluator_id, evaluated_id) VALUES (?, ?)
        ''', (user_id, match_id))
        conn.commit()
        
#–≤ –∫–∞–∫–∏—Ö-—Ç–æ —Å–ª—É—á–∞—è—Ö –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –æ—Ç–º–µ—Ç–∫–∏, —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
def remove_match(user_id, match_id):
    with conn:
        conn.execute('''
            DELETE FROM evaluations
            WHERE evaluator_id = ? AND evaluated_id = ?
        ''', (user_id, match_id))
        conn.commit()
        
#–ö–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ª—É—á—à–µ –∏—Ö –æ–±–Ω—É–ª—è—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å –ø–∞–º—è—Ç—å 
def clear_evaluations_if_needed():
    with conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        row_count = conn.execute('SELECT COUNT(*) FROM evaluations').fetchone()[0]
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ 300,000, –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if row_count >= 100000:
            conn.execute('DELETE FROM evaluations')
            conn.commit()

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.        
def find_matc(user_id, chat_id):
    with conn:
        result = conn.execute('SELECT preferences, gender  FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if result:
        prefs, user_gender = result
        with conn:
            result = conn.execute('''
                SELECT u.user_id, u.name, u.photo, u.bio, u.age, u.amount_of_wins, u.amount_of_pars, u.city
                FROM user_profiles u
                LEFT JOIN evaluations e ON u.user_id = e.evaluated_id AND e.evaluator_id = ?
                WHERE e.evaluated_id IS NULL
                AND u.user_id != ?
                AND u.city = (SELECT city FROM user_profiles WHERE user_id = ?)
                AND (u.gender = ? OR ? = 3)
                AND (u.preferences = ? OR u.preferences = 3)
                AND u.age BETWEEN (SELECT min_age FROM user_profiles WHERE user_id = ?) 
                            AND (SELECT max_age FROM user_profiles WHERE user_id = ?)
                AND (u.min_age <= (SELECT age FROM user_profiles WHERE user_id = ?)
                    AND u.max_age >= (SELECT age FROM user_profiles WHERE user_id = ?))
                AND u.name IS NOT NULL 
                AND u.photo IS NOT NULL 
                AND u.bio IS NOT NULL 
                AND u.age IS NOT NULL 
                AND u.amount_of_wins IS NOT NULL
                AND u.amount_of_pars IS NOT NULL
                ORDER BY u.last_online DESC
                LIMIT 1
            ''', (user_id, user_id, user_id, prefs, prefs, user_gender, user_id, user_id, user_id, user_id)).fetchone()
        if result:
            match_id, match_name, match_photo, match_bio, match_age, match_wins, match_pars, match_city= result
            match_text = f"{match_name}, {match_age}, {match_city} - {match_bio}\n{match_wins} –ø–æ–±–µ–¥ –∏–∑ {match_pars} –ë–∞—Ç—Ç–ª–æ–≤"
            markup = types.InlineKeyboardMarkup()
            btn_like = types.InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"like_{match_id}")
            btn_dislike = types.InlineKeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"dislike_{match_id}")
            btn_exit = types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data=f"exit_{match_id}")
            btn_report = types.InlineKeyboardButton("–ñ–∞–ª–æ–±–∞", callback_data=f"report_{match_id}")
            btn_message = types.InlineKeyboardButton("üíå", callback_data = f"message_{match_id}")
            markup.add(btn_like, btn_dislike, btn_message)
            markup.add(btn_exit, btn_report)
            mark_as_viewed(user_id,match_id)
            bot.send_photo(chat_id, match_photo, caption=match_text,reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(chat_id, "–í—Å–µ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —á–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!",reply_markup=dating_menu)
    else:
        bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')

#------------------------------------------------------------------------------------------------------------------------------------------
#–§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–¢–û-–ë–ê–¢–¢–õ–û–í
#------------------------------------------------------------------------------------------------------------------------------------------

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—Ç–ª–∞, –∫–æ–≥–¥–∞ —É–∂–µ –Ω–∞—à–ª–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ 
def start_battle(part_1_id,part_2_id):
    start_time = int(time.time())
    end_time = start_time + 86400
    participant_1_photo = conn.execute('SELECT photo FROM user_profiles WHERE user_id = ?', (part_1_id,)).fetchone()[0]
    participant_2_photo = conn.execute('SELECT photo FROM user_profiles WHERE user_id = ?', (part_2_id,)).fetchone()[0]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞—Ç—Ç–ª —Å —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    with conn:
        conn.execute('''
            INSERT INTO battles (participant_1, participant_2, participant_1_photo, participant_2_photo, start_time, end_time)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (part_1_id, part_2_id, participant_1_photo, participant_2_photo, start_time, end_time))
        conn.commit()
        
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ 2–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞
def find_opponent_for_battle(user_id):
    with conn:
        user = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if user:
        user_gender = user[0]
        opponent = conn.execute('''
                SELECT battle_queue.user_id FROM battle_queue
                JOIN user_profiles ON battle_queue.user_id = user_profiles.user_id
                WHERE user_profiles.gender = ? AND battle_queue.user_id != ?
                ORDER BY battle_queue.join_time ASC
                LIMIT 1
            ''', (user_gender, user_id)).fetchone()
        if opponent:
            opponent_id = opponent[0]
            start_battle(user_id, opponent_id)
            with conn:
                res1 = conn.execute('SELECT name, age, photo FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
                res2 = conn.execute('SELECT name, age, photo FROM user_profiles WHERE user_id = ?', (opponent_id,)).fetchone()
                conn.execute('DELETE FROM battle_queue WHERE user_id IN (?, ?)', (user_id, opponent_id))
                conn.commit()
            if res1 and res2:
                name1, age1, photo1 = res1
                name2, age2, photo2  = res2
                bot.send_photo(user_id, photo2, f"–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n{name2}, {age2}")
                bot.send_photo(opponent_id,photo1, f"–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n{name1}, {age1}")
            else:
                bot.send_message(user_id, '–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ —Å –±–∞—Ç—Ç–ª–æ–º. –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
                bot.send_message(opponent_id, '–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ —Å –±–∞—Ç—Ç–ª–æ–º. –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        else:
            bot.send_message(user_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∞—Ç—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è.")
        
#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞ 2–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ 
def join_battle(message):
    current_time = int(time.time())
    user_id = message.from_user.id
    chat_id = message.chat.id
    with conn:
        active_battles_count = conn.execute('''
            SELECT COUNT(*)
            FROM battles
            WHERE (participant_1 = ? OR participant_2 = ?) AND end_time > ?
        ''', (user_id, user_id, current_time)).fetchone()[0]
        if active_battles_count >= 1:
            bot.send_message(chat_id, f'–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞—Ç—Ç–ª–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')
            return 
    if is_profile_exists(message):
        with conn:
            in_battle = conn.execute('SELECT 1 FROM battle_queue WHERE user_id = ?', (user_id,)).fetchone()
            if in_battle:
                bot.send_message(chat_id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ-–±–∞—Ç—Ç–ª–µ")
                return 
            conn.execute('INSERT INTO battle_queue (user_id, join_time) VALUES (?, ?)', (user_id, int(time.time())))
            conn.commit()
        bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ-–±–∞—Ç—Ç–ª–µ! –ñ–¥–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        find_opponent_for_battle(user_id)
        
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—Ç–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å —É—á–∞—Å—Ç–≤—É–µ—à—å 

def my_battles(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    battles = conn.execute('''
        SELECT battle_id, participant_1, participant_2, participant_1_photo, participant_2_photo, end_time, votes_participant_1, votes_participant_2
        FROM battles
        WHERE (participant_1 = ? OR participant_2 = ?) AND end_time > ?
    ''', (user_id, user_id, int(time.time()))).fetchall()
    if not battles:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—Ç–ª–æ–≤.")
    else:
        for battle in battles:
            battle_id, participant_1, participant_2,photo1, photo2, end_time, votes1, votes2 = battle
            if participant_1 == user_id:
                opponent_id = participant_2
                yourvotes = votes1
                oppvotes = votes2
                opphoto = photo2
            else:
                opponent_id = participant_1
                yourvotes = votes2
                oppvotes = votes1
                opphoto = photo1
                
            opponent = conn.execute('SELECT name FROM user_profiles WHERE user_id = ?', (opponent_id,)).fetchone()
            opponent_name = opponent[0] if opponent else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            bot.send_photo(chat_id,opphoto,caption= f"–ë–∞—Ç—Ç–ª —Å {opponent_name}\n–ì–æ–ª–æ—Å–æ–≤ –∑–∞ –≤–∞—Å: {yourvotes}\n–ì–æ–ª–æ—Å–æ–≤ –∑–∞ {opponent_name}: {oppvotes}")
            
#–ë–∞—Ç—Ç–ª—ã –¥–ª—è—Ç—Å—è 24 —á–∞—Å–∞. –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–æ–≤–µ—Ä—è—é—â—É—é –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —â–∞—Å –∫–∞–∫–æ–π-—Ç–æ –±–∞—Ç—Ç–ª, —è –Ω–∞–ø–∏—Å–∞–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é. –ù–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
def check_for_completed_battles():
    current_time = int(time.time())
    finished_battles = conn.execute('''
        SELECT battle_id, participant_1, participant_2, votes_participant_1, votes_participant_2
        FROM battles
        WHERE end_time <= ? AND status = ?
    ''', (current_time, 'active')).fetchall()
    for battle in finished_battles:
        battle_id, participant_1, participant_2, votes_1, votes_2 = battle
        if votes_1 > votes_2:
            winner_id = participant_1
            loser_id = participant_2
        elif votes_2 > votes_1:
            winner_id = participant_2
            loser_id = participant_1
        else:
            winner_id = None
        conn.execute('''
            UPDATE battles
            SET status = 'completed'
            WHERE battle_id = ?
        ''', (battle_id,))
        clean_up_votes(battle_id)
        notify_battle_result(participant_1, participant_2, winner_id, votes_1, votes_2)
        
emoji_dict = {
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£'
}

#–ü–æ–∏—Å–∫ —Ç–æ–ø5 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ –≤ –±–∞—Ç—Ç–ª–∞—Ö 
def top_5_participants(message):
    flag = True
    chat_id = message.chat.id
    with conn:
        top_users = conn.execute('''
            SELECT name, age, photo, amount_of_wins 
            FROM user_profiles 
            ORDER BY amount_of_wins DESC
            LIMIT 5
        ''').fetchall()
    if top_users and len(top_users)==5:
        media_group = []
        text = ''
        i = 0
        for user in top_users:
            i += 1
            name, age, photo, wins = user
            if name and age and photo and (wins >= 0):
                media_group.append(types.InputMediaPhoto(photo))
                text += f'{emoji_dict.get(i,i)} –ú–µ—Å—Ç–æ - {name}, {age}, {wins} –ø–æ–±–µ–¥\n'
            else:
                flag = False
                bot.send_message(chat_id, f'–£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ª—é–¥–µ–π –∏–∑ —Ç–æ–ø–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞. –°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¢–æ–ø 5')
                break
                
        if flag:
            bot.send_media_group(chat_id,media_group)
            bot.send_message(chat_id,text)
    else:
        bot.send_message(chat_id,f'–ü–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞')

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—Ç–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º 
def show_next_battle(chat_id, user_id):
    current_time = int(time.time())
    with conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—Ç–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
        battle = conn.execute('''
            SELECT battle_id, participant_1, participant_2, end_time, participant_1_photo, participant_2_photo
            FROM battles
            WHERE end_time > ? AND battle_id NOT IN (SELECT battle_id FROM votes WHERE user_id = ?)
            ORDER BY end_time ASC
            LIMIT 1
        ''', (current_time, user_id)).fetchone()
    if battle:
        battle_id, left_user_id, right_user_id, end_time, photo1, photo2 = battle
        left_user = conn.execute('SELECT name, age FROM user_profiles WHERE user_id = ?', (left_user_id,)).fetchone()
        right_user = conn.execute('SELECT name, age FROM user_profiles WHERE user_id = ?', (right_user_id,)).fetchone()
        if left_user and right_user:
            left_username, age1 = left_user
            right_username, age2 = right_user
            media_group = [
            types.InputMediaPhoto(photo1),
            types.InputMediaPhoto(photo2)
            ]
            bot.send_media_group(
                user_id,media_group
            )
            bot.send_message(user_id,f'–ó–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—à—å?\n–ù–∞ 1 —Ñ–æ—Ç–æ: {left_username}, {age1}\n–ù–∞ 2 —Ñ–æ—Ç–æ: {right_username}, {age2}', reply_markup=create_battle_vote_exit_markup(battle_id, left_username,right_username))
        else:
            bot.send_message(chat_id, f'–Ω–µ—Ç –±–∞—Ç—Ç–ª–æ–≤ {left_user}, {right_user}, {left_user_id}, {right_user_id}')
    else:
        bot.send_message(user_id, f'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—Ç–ª–æ–≤.')
        
#–∫–æ–≥–¥–∞ –±–∞—Ç—Ç–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
def notify_battle_result(participant_1, participant_2, winner_id, votes1, votes2):
    with conn:
        res1 = conn.execute('SELECT name, photo, age FROM user_profiles WHERE user_id = ?', (participant_1,)).fetchone()
        res2 = conn.execute('SELECT name, photo, age FROM user_profiles WHERE user_id = ?', (participant_2,)).fetchone()
    if res1 and res2:
        name1,photo1,age1 = res1
        name2, photo2, age2 = res2
        if winner_id:
            if participant_1 == winner_id:
                with conn:
                    conn.execute('UPDATE user_profiles SET amount_of_wins = amount_of_wins + 1 WHERE user_id = ?', (participant_1,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_1,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_2,))
                bot.send_photo(participant_1,photo2, caption=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name2}, {age2} —Å–æ —Å—á–µ—Ç–æ–º {votes1}-{votes2}')
                bot.send_photo(participant_2,photo1, caption=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name1}, {age1} —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
            else:
                with conn:
                    conn.execute('UPDATE user_profiles SET amount_of_wins = amount_of_wins + 1 WHERE user_id = ?', (participant_2,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_2,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_1,))
                bot.send_photo(participant_2,photo1, caption=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name1}, {age1} —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
                bot.send_photo(participant_1,photo2, caption=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name2}, {age2} —Å–æ —Å—á–µ—Ç–æ–º {votes1}-{votes2}')
        else:
            with conn:
                conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_2,))
                conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_1,))
            bot.send_photo(participant_2,photo1, caption=f'–ë–∞—Ç—Ç–ª –ø—Ä–æ—Ç–∏–≤ {name1}, {age1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
            bot.send_photo(participant_1,photo2, caption=f'–ë–∞—Ç—Ç–ª –ø—Ä–æ—Ç–∏–≤ {name2}, {age2} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
        
#—Å–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –±–∞—Ç—Ç–ª–æ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
def create_battle_vote_exit_markup(battle_id, left_name, right_name):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(f"{left_name}", callback_data=f"vote_left_{battle_id}"),
        types.InlineKeyboardButton(f"{right_name}", callback_data=f"vote_right_{battle_id}")
    )
    markup.row(types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data=f"exit_battle"))
    return markup

#–§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –æ—á–∏—â–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –≥–æ–ª–æ—Å–∞–º–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–º –±–∞—Ç—Ç–ª–∞–º
def clean_up_votes(battle_id):
    with conn:
        conn.execute('''
            DELETE FROM votes
            WHERE battle_id = ?
        ''', (battle_id,))
        conn.commit()
