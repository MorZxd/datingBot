import telebot
from random import choice,randint
from telebot import types
import sqlite3
from datetime import datetime
import time
import smtplib
from email.mime.text import MIMEText
from geopy.geocoders import Nominatim
from validate_email import validate_email #pip install py3dns (?)
from email_check_and_send import my_valid_email, send_verification_email

geolocator = Nominatim(user_agent="city_validator") #city validator

#–°–æ–∑–¥–∞–µ–º –ë–î

conn = sqlite3.connect('users.db', check_same_thread=False)

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS user_profiles (
            user_id INTEGER PRIMARY KEY,
            city TEXT,
            min_age INTEGER,
            max_age INTEGER,
            email TEXT,
            gender INTEGER,
            preferences INTEGER,
            name TEXT,
            age TEXT,
            balance INTEGER DEFAULT 0,
            photo BLOB,
            bio TEXT,
            status_dating INTEGER,
            last_online TEXT,
            amount_of_wins INTEGER DEFAULT 0,
            amount_of_pars INTEGER DEFAULT 0,
            subscribe INTEGER,
            last_email_send INTEGER,
            status_ban TEXT DEFAULT norm
        )
    ''')

with conn: 
    conn.execute('''
        CREATE TABLE IF NOT EXISTS votes (
            user_id INTEGER,
            battle_id INTEGER,
            vote_side TEXT,  -- 'left' –∏–ª–∏ 'right'
            PRIMARY KEY (user_id, battle_id)
        )
    ''')
    
with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS evaluations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            evaluator_id INTEGER,
            evaluated_id INTEGER,
            evaluation_date TEXT,
            FOREIGN KEY (evaluator_id) REFERENCES user_profiles(user_id),
            FOREIGN KEY (evaluated_id) REFERENCES user_profiles(user_id)
        );
    ''')
    conn.commit()

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS battle_queue (
        user_id INTEGER PRIMARY KEY,
        join_time INTEGER
        );
    ''')
    
with conn:
    conn.execute('''CREATE TABLE IF NOT EXISTS battles (
    battle_id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_1 INTEGER,
    participant_2 INTEGER,
    participant_1_photo BLOB,  -- –§–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant_2_photo BLOB,  -- –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    start_time INTEGER,
    end_time INTEGER,
    votes_participant_1 INTEGER DEFAULT 0,
    votes_participant_2 INTEGER DEFAULT 0,
    winner INTEGER,
    status TEXT DEFAULT 'active',
    FOREIGN KEY (participant_1) REFERENCES user_profiles(user_id),
    FOREIGN KEY (participant_2) REFERENCES user_profiles(user_id)
    );
    ''')

#–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
genders = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_m = types.KeyboardButton('–ü–∞—Ä–µ–Ω—å')
but_j = types.KeyboardButton('–î–µ–≤—É—à–∫–∞')
genders.add(but_m,but_j)


start_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_znakomstva = types.KeyboardButton('–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚ù§Ô∏è')
but_battle = types.KeyboardButton('–ë–∞—Ç—Ç–ª –§–æ—Ç–æ üî•')
but_settings = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
start_menu.add(but_znakomstva,but_battle, but_settings)

but_back = types.KeyboardButton('–ù–∞–∑–∞–¥')

dating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_anket = types.KeyboardButton('–ú–æ—è –ê–Ω–∫–µ—Ç–∞')
but_find = types.KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
dating_menu.add(but_my_anket, but_find, but_back)

looking_for_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_girl = types.KeyboardButton('–î–µ–≤—É—à–∫–∏')
but_boy = types.KeyboardButton('–ü–∞—Ä–Ω–∏')
but_dont_matter = types.KeyboardButton('–ù–µ –≤–∞–∂–Ω–æ')
looking_for_menu.add(but_girl,but_boy,but_dont_matter)

battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_profile = types.KeyboardButton('–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å')
but_list_battles = types.KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –ë–∞—Ç—Ç–ª—ã')
but_participation = types.KeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –£—á–∞—Å—Ç–∏–µ')
but_my_battles = types.KeyboardButton('–ú–æ–∏ –ë–∞—Ç—Ç–ª—ã')
but_top_5 = types.KeyboardButton('–¢–æ–ø 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
battle_menu.add(but_my_profile, but_list_battles, but_participation, but_my_battles, but_top_5, but_back)

rating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_like = types.KeyboardButton('–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
but_dislike = types.KeyboardButton('–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è')
but_to_anket = types.KeyboardButton('–ö –ê–Ω–∫–µ—Ç–µ')
rating_menu.add(but_like,but_dislike,but_to_anket)

curr_battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_first = types.KeyboardButton('–°–ª–µ–≤–∞ –ª—É—á—à–µ!')
but_sec = types.KeyboardButton('–°–ø—Ä–∞–≤–∞ –ª—É—á—à–µ!')
but_to_menu = types.KeyboardButton('–í –º–µ–Ω—é')
curr_battle_menu.add(but_first, but_sec, but_to_menu)

univs = types.InlineKeyboardMarkup()
but_mirea = types.InlineKeyboardButton(f'–†–¢–£ –ú–ò–†–≠–ê', callback_data='univ_mirea')
but_hse = types.InlineKeyboardButton(f'–ù–ò–£ –í–®–≠', callback_data='univ_hse')
univs.add(but_mirea, but_hse)

markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_change_anket = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
markup_settings.add(but_change_anket, but_back)

markup_change_anket = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_name = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
but_city = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
but_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç')
but_prefer_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
but_gender = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª')
but_photo = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ')
markup_change_anket.add(but_photo, but_name, but_age, but_city, but_prefer_age, but_gender, but_back)

#define bot
bot = telebot.TeleBot('')

#define token for pay
TELEGRAM_PROVIDER_TOKEN = ""

#–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
user_states = {} #–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. user_states[user_id] = 'wait bio' => —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—å, –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
verif_codes = {} #—Ç—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
payloads_ids = {} #—Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–ª–∞—Ç–µ–∂–µ–π —é–∑–µ—Ä–æ–≤ 


#------------------------------------------------------------------------------------------------------------------------------------------
#–°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
#------------------------------------------------------------------------------------------------------------------------------------------

#–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–∞, –∏–ª–∏ –µ–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
def is_profile_exists(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    with conn:
        result = conn.execute('''
            SELECT name, photo, gender, bio, age, city 
            FROM user_profiles 
            WHERE user_id = ?
        ''', (user_id,)).fetchone()
    if result:
        name, photo, gender, bio, age, city = result
        if name and photo and (gender == 1 or gender == 2) and bio and age and city:
            return True
        else:
            bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')
            return False
    else:
        bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')
        return False

    
#–ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç. –µ–≥–æ —Å—Ç–∞—Ç—É—Å –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î. 
def get_status(user_id):
    with conn:
        res1 = conn.execute('SELECT status_ban FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if res1:
        return res1[0]
    else:
        return 'norm'
    
#–ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é –ø–æ—á—Ç—É 
def is_profile_verified(user_id):
    with conn:
        email = conn.execute('SELECT email FROM user_profiles WHERE user_id = ?',(user_id,)).fetchone()
    if email != (None,) and email != None:
        return True
    else:
        return False
        
#–ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∞—Å—Ç –æ–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ª–∞—Å—Ç –æ–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ.
def update_last_online(message):
    user_id = message.from_user.id
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with conn:
        result = conn.execute('SELECT user_id FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if result is None:
        with conn:
            conn.execute('''
                INSERT INTO user_profiles (user_id) VALUES (?)
            ''', (user_id,))
    with conn:
        conn.execute('''
            UPDATE user_profiles
            SET last_online = ?
            WHERE user_id = ?
        ''', (current_time, user_id))
        conn.commit()


#–¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è / –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
        
def get_name(message, is_edit):
    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–µ–Ω–∏")
        bot.register_next_step_handler(message, get_name, is_edit)
        return
    name = message.text
    if len(name) >= 25:
        bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, get_name, is_edit)
        return
    with conn:
                        conn.execute('''
        UPDATE user_profiles
        SET name = ?
        WHERE user_id = ?
    ''', (name, message.from_user.id))
    if is_edit:
        bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! {name}, —Ç—ã –ü–∞—Ä–µ–Ω—å –∏–ª–∏ –î–µ–≤—É—à–∫–∞?',reply_markup = genders)
        bot.register_next_step_handler(message, get_gender, is_edit = False)

def get_gender(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        gender = message.text
        gender = gender.lower()
        if gender != '–ø–∞—Ä–µ–Ω—å' and gender != '–¥–µ–≤—É—à–∫–∞':
            bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º: –ü–∞—Ä–µ–Ω—å –≤—ã –∏–ª–∏ –î–µ–≤—É—à–∫–∞',reply_markup = genders)
            bot.register_next_step_handler(message, get_gender, is_edit)
            return 
        else:
            if gender == '–ø–∞—Ä–µ–Ω—å':
                gender = 1
                with conn:
                    conn.execute('''
                    UPDATE user_profiles
                    SET gender = ?
                    WHERE user_id = ?
                ''', (gender,user_id))
            else:
                gender = 2
                with conn:
                    conn.execute('''
                    UPDATE user_profiles
                    SET gender = ?
                    WHERE user_id = ?
                ''', (gender,user_id))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
        else:
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –ª—é–¥–∏ –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã\n–î–µ–≤—É—à–∫–∏/–ü–∞—Ä–Ω–∏/–ù–µ –≤–∞–∂–Ω–æ',reply_markup = looking_for_menu)
            bot.register_next_step_handler(message, get_prefs, is_edit)
    else:
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ: –ü–∞—Ä–µ–Ω—å –≤—ã –∏–ª–∏ –î–µ–≤—É—à–∫–∞',reply_markup = genders)
        bot.register_next_step_handler(message, get_gender, is_edit)
        return 
        
def get_prefs(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        prefers = message.text
        prefers = prefers.lower()
        if prefers not in ['–¥–µ–≤—É—à–∫–∏','–ø–∞—Ä–Ω–∏','–Ω–µ –≤–∞–∂–Ω–æ']:
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n–î–µ–≤—É—à–∫–∏\n–ü–∞—Ä–Ω–∏\n–ù–µ –≤–∞–∂–Ω–æ',reply_markup=looking_for_menu)
            bot.register_next_step_handler(message, get_prefs, is_edit)
            return 
        with conn:
            if prefers == "–ø–∞—Ä–Ω–∏":
                conn.execute('UPDATE user_profiles SET preferences = 1 WHERE user_id = ?', (user_id,))
            elif prefers == "–¥–µ–≤—É—à–∫–∏":
                conn.execute('UPDATE user_profiles SET preferences = 2 WHERE user_id = ?', (user_id,))
            elif prefers == "–Ω–µ –≤–∞–∂–Ω–æ":
                conn.execute('UPDATE user_profiles SET preferences = 3 WHERE user_id = ?', (user_id,))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
        else:
            bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ',reply_markup = types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_bio, is_edit)
    else:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n–î–µ–≤—É—à–∫–∏\n–ü–∞—Ä–Ω–∏\n–ù–µ –≤–∞–∂–Ω–æ',reply_markup=looking_for_menu)
        bot.register_next_step_handler(message, get_prefs, is_edit)
        return

def get_bio(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        bio = message.text
        if len(bio) >= 150:
            bot.send_message(chat_id, '–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 150 —Å–∏–º–≤–æ–ª–æ–≤')
            bot.register_next_step_handler(message, get_bio, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET bio = ?
            WHERE user_id = ?
        ''', (bio,user_id))
        if is_edit:
            bot.send_message(f'–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
        else:
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
            bot.register_next_step_handler(message, get_age, is_edit)
    else:
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º')
        bot.register_next_step_handler(message, get_bio, is_edit)
        return 

def get_age(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        age = message.text
        if not(age.isdigit()) or int(age)<=10 or int(age) >= 150:
            bot.send_message(chat_id,'–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
            bot.register_next_step_handler(message, get_age, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET age = ?
            WHERE user_id = ?
            ''', (age,user_id))
        if is_edit:
            bot.send_message(f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
        else:
            bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤—ã –∏—â–∏—Ç–µ –ª—é–¥–µ–π\n–ù–∞–ø–∏—à–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ\n\n–ü—Ä–∏–º–µ—Ä: 20 30\n–û–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ –ª—é–¥–µ–π –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ—Ç 20 –¥–æ 30 –ª–µ—Ç –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
    else:
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
        bot.register_next_step_handler(message, get_age, is_edit)
        return

def get_pref_age(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        text = message.text
        if len(text.split()) != 2:
            bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        age1,age2 = text.split()
        if not(age1.isdigit()) or not(age2.isdigit()):
            bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        if int(age1) <= 10 or int(age1)>150 or int(age2)<=10 or int(age2)>150:
            bot.send_message(chat_id, f'–û–±–∞ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª–µ–µ 10, –∏ –º–µ–Ω–µ–µ 150')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return
        elif int(age1)>int(age2):
            bot.send_message(chat_id, f'–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞, –æ–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET min_age = ?, max_age = ?
            WHERE user_id = ?
            ''', (age1,age2, user_id))
        if is_edit:
            bot.send_message(f'–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
        else:
            bot.send_message(chat_id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞/–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–∏—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –õ—É—á—à–µ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –ø–æ–∏—Å–∫–µ –ú–æ—Å–∫–≤–∞ ‚â† Moscow')
            bot.register_next_step_handler(message, get_city, is_edit)
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        bot.register_next_step_handler(message, get_pref_age, is_edit)

def get_city(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        text = message.text
        loc = geolocator.geocode(text)
        if loc:
            text = text.title()
            with conn:
                        conn.execute('''
                UPDATE user_profiles
                SET city = ?
                WHERE user_id = ?
            ''', (text, user_id))
            if is_edit:
                bot.send_message(f'–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
            else:
                bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ')
                bot.register_next_step_handler(message, get_photo, is_edit)
        else:
            bot.send_message(chat_id, f'–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –≤–∞–º –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
            bot.register_next_step_handler(message, get_city, is_edit)
            return 
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º')
        bot.register_next_step_handler(message, get_city, is_edit)
        return 

def get_photo(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET photo = ?
            WHERE user_id = ?
        ''', (downloaded_file,user_id))
        if is_edit:
            bot.reply_to(message, "–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!",reply_markup = start_menu)
        else:
            bot.reply_to(message, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!",reply_markup = start_menu)
    else:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–æ—Ç–æ',reply_markup = types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_photo, is_edit)
        return 
