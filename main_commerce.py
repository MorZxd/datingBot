import telebot
from random import choice,randint
from telebot import types
import sqlite3
from datetime import datetime
import time
from geopy.geocoders import Nominatim
from validate_email import validate_email #pip install py3dns (?)
from email_check_and_send import my_valid_email, send_verification_email

geolocator = Nominatim(user_agent="city_validator") #city validator

#–°–æ–∑–¥–∞–µ–º –ë–î

conn = sqlite3.connect('users.db', check_same_thread=False)

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS user_profiles (
            user_id INTEGER PRIMARY KEY,
            city TEXT,
            min_age INTEGER,
            max_age INTEGER,
            email TEXT,
            gender INTEGER,
            preferences INTEGER,
            name TEXT,
            age TEXT,
            balance INTEGER DEFAULT 0,
            photo BLOB,
            bio TEXT,
            status_dating INTEGER,
            last_online TEXT,
            amount_of_wins INTEGER DEFAULT 0,
            amount_of_pars INTEGER DEFAULT 0,
            subscribe INTEGER,
            last_email_send INTEGER,
            status_ban TEXT DEFAULT norm
        )
    ''')

#—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –ë–î 

with conn: 
    conn.execute('''
        CREATE TABLE IF NOT EXISTS votes (
            user_id INTEGER,
            battle_id INTEGER,
            vote_side TEXT,  -- 'left' –∏–ª–∏ 'right'
            PRIMARY KEY (user_id, battle_id)
        )
    ''')
    
with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS evaluations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            evaluator_id INTEGER,
            evaluated_id INTEGER,
            evaluation_date TEXT,
            FOREIGN KEY (evaluator_id) REFERENCES user_profiles(user_id),
            FOREIGN KEY (evaluated_id) REFERENCES user_profiles(user_id)
        );
    ''')
    conn.commit()

with conn:
    conn.execute('''
        CREATE TABLE IF NOT EXISTS battle_queue (
        user_id INTEGER PRIMARY KEY,
        join_time INTEGER
        );
    ''')
    
with conn:
    conn.execute('''CREATE TABLE IF NOT EXISTS battles (
    battle_id INTEGER PRIMARY KEY AUTOINCREMENT,
    participant_1 INTEGER,
    participant_2 INTEGER,
    participant_1_photo BLOB,  -- –§–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participant_2_photo BLOB,  -- –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    start_time INTEGER,
    end_time INTEGER,
    votes_participant_1 INTEGER DEFAULT 0,
    votes_participant_2 INTEGER DEFAULT 0,
    winner INTEGER,
    status TEXT DEFAULT 'active',
    FOREIGN KEY (participant_1) REFERENCES user_profiles(user_id),
    FOREIGN KEY (participant_2) REFERENCES user_profiles(user_id)
    );
    ''')

with conn:
    conn.execute("""
        CREATE TABLE IF NOT EXISTS referrals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            referred_user_id INTEGER NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS referral_rewards (
            user_id INTEGER PRIMARY KEY,
            referral_count INTEGER DEFAULT 0
        );
    """)

#–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
genders = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_m = types.KeyboardButton('–ü–∞—Ä–µ–Ω—å')
but_j = types.KeyboardButton('–î–µ–≤—É—à–∫–∞')
genders.add(but_m,but_j)


start_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_znakomstva = types.KeyboardButton('–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚ù§Ô∏è')
but_battle = types.KeyboardButton('–ë–∞—Ç—Ç–ª –§–æ—Ç–æ üî•')
but_settings = types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
start_menu.add(but_znakomstva,but_battle, but_settings)

but_back = types.KeyboardButton('–ù–∞–∑–∞–¥')

dating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_anket = types.KeyboardButton('–ú–æ—è –ê–Ω–∫–µ—Ç–∞')
but_find = types.KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã')
dating_menu.add(but_my_anket, but_find, but_back)

looking_for_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_girl = types.KeyboardButton('–î–µ–≤—É—à–∫–∏')
but_boy = types.KeyboardButton('–ü–∞—Ä–Ω–∏')
but_dont_matter = types.KeyboardButton('–ù–µ –≤–∞–∂–Ω–æ')
looking_for_menu.add(but_girl,but_boy,but_dont_matter)

battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_my_profile = types.KeyboardButton('–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å')
but_list_battles = types.KeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ –ë–∞—Ç—Ç–ª—ã')
but_participation = types.KeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –£—á–∞—Å—Ç–∏–µ')
but_my_battles = types.KeyboardButton('–ú–æ–∏ –ë–∞—Ç—Ç–ª—ã')
but_top_5 = types.KeyboardButton('–¢–æ–ø 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
battle_menu.add(but_my_profile, but_list_battles, but_participation, but_my_battles, but_top_5, but_back)

rating_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_like = types.KeyboardButton('–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
but_dislike = types.KeyboardButton('–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è')
but_to_anket = types.KeyboardButton('–ö –ê–Ω–∫–µ—Ç–µ')
rating_menu.add(but_like,but_dislike,but_to_anket)

curr_battle_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_first = types.KeyboardButton('–°–ª–µ–≤–∞ –ª—É—á—à–µ!')
but_sec = types.KeyboardButton('–°–ø—Ä–∞–≤–∞ –ª—É—á—à–µ!')
but_to_menu = types.KeyboardButton('–í –º–µ–Ω—é')
curr_battle_menu.add(but_first, but_sec, but_to_menu)

univs = types.InlineKeyboardMarkup()
but_mirea = types.InlineKeyboardButton(f'–†–¢–£ –ú–ò–†–≠–ê', callback_data='univ_mirea')
but_hse = types.InlineKeyboardButton(f'–ù–ò–£ –í–®–≠', callback_data='univ_hse')
univs.add(but_mirea, but_hse)

markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_change_anket = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
but_referals = types.KeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞')
but_balance = types.KeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å')
markup_settings.add(but_change_anket, but_referals, but_balance, but_back)

markup_change_anket = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_name = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è')
but_city = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥')
but_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç')
but_prefer_age = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É')
but_gender = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª')
but_photo = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ')
markup_change_anket.add(but_photo, but_name, but_age, but_city, but_prefer_age, but_gender, but_back)


markup_referals = types.ReplyKeyboardMarkup(resize_keyboard=True)
but_referals = types.KeyboardButton('üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞')
markup_referals.add(but_referals, "üèÜ–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã", "üî¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", but_back)

#define bot
bot = telebot.TeleBot('7686184399:AAE05Ll7kwOtIP9SmbNwhiSL4jh0zD-UB9E')

#define token for pay
TELEGRAM_PROVIDER_TOKEN = "390540012:LIVE:60900"

ADMIN_CHAT_ID = 6670128924 #–ö–∞—Ç—è –¥–æ–ø –∞–∫–∫–∞—É–Ω—Ç

#–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
user_states = {} #–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. user_states[user_id] = 'wait bio' => —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–∞–≤—Ç–µ–ª—å, –±—É–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
verif_codes = {} #—Ç—É—Ç —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
payloads_ids = {} #—Å–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–ª–∞—Ç–µ–∂–µ–π —é–∑–µ—Ä–æ–≤ 


#------------------------------------------------------------------------------------------------------------------------------------------
#–°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò
#------------------------------------------------------------------------------------------------------------------------------------------

#–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–Ω–∫–µ—Ç–∞, –∏–ª–∏ –µ–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
def is_profile_exists(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    with conn:
        result = conn.execute('''
            SELECT name, photo, gender, bio, age, city 
            FROM user_profiles 
            WHERE user_id = ?
        ''', (user_id,)).fetchone()
    if result:
        name, photo, gender, bio, age, city = result
        if name and photo and (gender == 1 or gender == 2) and bio and age and city:
            return True
        else:
            bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')
            return False
    else:
        bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')
        return False

    
#–ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç. –µ–≥–æ —Å—Ç–∞—Ç—É—Å –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î. 
def get_status(user_id):
    with conn:
        res1 = conn.execute('SELECT status_ban FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if res1:
        return res1[0]
    else:
        return 'norm'
    
#–ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ—é –ø–æ—á—Ç—É 
def is_profile_verified(user_id):
    with conn:
        email = conn.execute('SELECT email FROM user_profiles WHERE user_id = ?',(user_id,)).fetchone()
    if email != (None,) and email != None:
        return True
    else:
        return False
        
#–ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç—ã —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∞—Å—Ç –æ–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ª–∞—Å—Ç –æ–Ω–ª–∞–π–Ω –≤ –±–æ—Ç–µ.
def update_last_online(message):
    user_id = message.from_user.id
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    with conn:
        result = conn.execute('SELECT user_id FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if result is None:
        with conn:
            conn.execute('''
                INSERT INTO user_profiles (user_id) VALUES (?)
            ''', (user_id,))
    with conn:
        conn.execute('''
            UPDATE user_profiles
            SET last_online = ?
            WHERE user_id = ?
        ''', (current_time, user_id))
        conn.commit()
        
def get_name(message, is_edit):
    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–µ–Ω–∏")
        bot.register_next_step_handler(message, get_name, is_edit)
        return
    name = message.text
    if len(name) >= 25:
        bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, get_name, is_edit)
        return
    with conn:
                        conn.execute('''
        UPDATE user_profiles
        SET name = ?
        WHERE user_id = ?
    ''', (name, message.from_user.id))
    if is_edit:
        bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup = start_menu)
    else:
        bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! {name}, —Ç—ã –ü–∞—Ä–µ–Ω—å –∏–ª–∏ –î–µ–≤—É—à–∫–∞?',reply_markup = genders)
        bot.register_next_step_handler(message, get_gender, is_edit = False)

def get_gender(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        gender = message.text
        gender = gender.lower()
        if gender != '–ø–∞—Ä–µ–Ω—å' and gender != '–¥–µ–≤—É—à–∫–∞':
            bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º: –ü–∞—Ä–µ–Ω—å –≤—ã –∏–ª–∏ –î–µ–≤—É—à–∫–∞',reply_markup = genders)
            bot.register_next_step_handler(message, get_gender, is_edit)
            return 
        else:
            if gender == '–ø–∞—Ä–µ–Ω—å':
                gender = 1
                with conn:
                    conn.execute('''
                    UPDATE user_profiles
                    SET gender = ?
                    WHERE user_id = ?
                ''', (gender,user_id))
            else:
                gender = 2
                with conn:
                    conn.execute('''
                    UPDATE user_profiles
                    SET gender = ?
                    WHERE user_id = ?
                ''', (gender,user_id))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à –ø–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', reply_markup = start_menu)
        else:
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –ª—é–¥–∏ –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã\n\n<i>–í—ã–±–µ—Ä–∏—Ç–µ: –î–µ–≤—É—à–∫–∏/–ü–∞—Ä–Ω–∏/–ù–µ –≤–∞–∂–Ω–æ</i>',reply_markup = looking_for_menu, parse_mode='HTML')
            bot.register_next_step_handler(message, get_prefs, is_edit)
    else:
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ: –ü–∞—Ä–µ–Ω—å –≤—ã –∏–ª–∏ –î–µ–≤—É—à–∫–∞',reply_markup = genders)
        bot.register_next_step_handler(message, get_gender, is_edit)
        return 
        
def get_prefs(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        prefers = message.text
        prefers = prefers.lower()
        if prefers not in ['–¥–µ–≤—É—à–∫–∏','–ø–∞—Ä–Ω–∏','–Ω–µ –≤–∞–∂–Ω–æ']:
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n–î–µ–≤—É—à–∫–∏\n–ü–∞—Ä–Ω–∏\n–ù–µ –≤–∞–∂–Ω–æ',reply_markup=looking_for_menu)
            bot.register_next_step_handler(message, get_prefs, is_edit)
            return 
        with conn:
            if prefers == "–ø–∞—Ä–Ω–∏":
                conn.execute('UPDATE user_profiles SET preferences = 1 WHERE user_id = ?', (user_id,))
            elif prefers == "–¥–µ–≤—É—à–∫–∏":
                conn.execute('UPDATE user_profiles SET preferences = 2 WHERE user_id = ?', (user_id,))
            elif prefers == "–Ω–µ –≤–∞–∂–Ω–æ":
                conn.execute('UPDATE user_profiles SET preferences = 3 WHERE user_id = ?', (user_id,))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup = start_menu)
        else:
            bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ',reply_markup = types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_bio, is_edit)
    else:
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏ 1 –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n–î–µ–≤—É—à–∫–∏\n–ü–∞—Ä–Ω–∏\n–ù–µ –≤–∞–∂–Ω–æ',reply_markup=looking_for_menu)
        bot.register_next_step_handler(message, get_prefs, is_edit)
        return

def get_bio(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        bio = message.text
        if len(bio) >= 150:
            bot.send_message(chat_id, '–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 150 —Å–∏–º–≤–æ–ª–æ–≤')
            bot.register_next_step_handler(message, get_bio, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET bio = ?
            WHERE user_id = ?
        ''', (bio,user_id))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!', reply_markup=start_menu)
        else:
            bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
            bot.register_next_step_handler(message, get_age, is_edit)
    else:
        bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º')
        bot.register_next_step_handler(message, get_bio, is_edit)
        return 

def get_age(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        age = message.text
        if not(age.isdigit()) or int(age)<=10 or int(age) >= 150:
            bot.send_message(chat_id,'–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
            bot.register_next_step_handler(message, get_age, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET age = ?
            WHERE user_id = ?
            ''', (age,user_id))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=start_menu)
        else:
            bot.send_message(chat_id, f'–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤—ã –∏—â–∏—Ç–µ –ª—é–¥–µ–π\n–ù–∞–ø–∏—à–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ\n\n<i>–ü—Ä–∏–º–µ—Ä: 20 30\n–û–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ –ª—é–¥–µ–π –≤–æ–∑—Ä–∞—Å—Ç–æ–º –æ—Ç 20 –¥–æ 30 –ª–µ—Ç –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ</i>',parse_mode="HTML")
            bot.register_next_step_handler(message, get_pref_age, is_edit)
    else:
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ - –≤–∞—à –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç')
        bot.register_next_step_handler(message, get_age, is_edit)
        return

def get_pref_age(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        text = message.text
        if len(text.split()) != 2:
            bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        age1,age2 = text.split()
        if not(age1.isdigit()) or not(age2.isdigit()):
            bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        if int(age1) <= 10 or int(age1)>150 or int(age2)<=10 or int(age2)>150:
            bot.send_message(chat_id, f'–û–±–∞ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª–µ–µ 10, –∏ –º–µ–Ω–µ–µ 150')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return
        elif int(age1)>int(age2):
            bot.send_message(chat_id, f'–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞, –æ–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ')
            bot.register_next_step_handler(message, get_pref_age, is_edit)
            return 
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET min_age = ?, max_age = ?
            WHERE user_id = ?
            ''', (age1,age2, user_id))
        if is_edit:
            bot.send_message(chat_id, f'–í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup= start_menu)
        else:
            bot.send_message(chat_id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞/–Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∏—â–∏—Ç–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n\n<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Å–ª—É—á–∞–µ —Å –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ—è—Ç—å –µ–≥–æ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã -- –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã. –ê–Ω–∫–µ—Ç—É –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö</i>', parse_mode='HTML')
            bot.register_next_step_handler(message, get_city, is_edit)
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        bot.register_next_step_handler(message, get_pref_age, is_edit)

def normalize_city_to_russian(city_name):
    geolocator2 = Nominatim(user_agent="city_normalizer")
    location = geolocator2.geocode(city_name, language="ru")  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
    if location:
        city = location.address.split(",")[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤—Ä–æ–¥–µ "–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥"
        if city.startswith("–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ "):
            city = city.replace("–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥ ", "", 1)
        return city.strip()
    return None

def get_city(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'text':
        text = message.text
        loc = normalize_city_to_russian(text)
        if loc:
            text = text.title()
            with conn:
                        conn.execute('''
                UPDATE user_profiles
                SET city = ?
                WHERE user_id = ?
            ''', (loc, user_id))
            if is_edit:
                bot.send_message(chat_id, f'–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!', reply_markup=start_menu)
            else:
                bot.send_message(chat_id, f'–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ')
                bot.register_next_step_handler(message, get_photo, is_edit)
        else:
            bot.send_message(chat_id, f'–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫ –≤–∞–º –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞')
            bot.register_next_step_handler(message, get_city, is_edit)
            return 
    else:
        bot.send_message(chat_id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º')
        bot.register_next_step_handler(message, get_city, is_edit)
        return 

def get_photo(message, is_edit):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with conn:
            conn.execute('''
            UPDATE user_profiles
            SET photo = ?
            WHERE user_id = ?
        ''', (downloaded_file,user_id))
        with conn:
            conn.execute('''
                DELETE FROM evaluations
                WHERE evaluator_id = ? OR evaluated_id = ?
            ''', (user_id, user_id))
            conn.commit()
        if is_edit:
            bot.reply_to(message, "–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!",reply_markup = start_menu)
        else:
            bot.reply_to(message, "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞!",reply_markup = start_menu)
            with conn:
                conn.execute('''
                    DELETE FROM evaluations
                    WHERE evaluator_id = ? OR evaluated_id = ?
                ''', (user_id, user_id))
                conn.commit()
    else:
        bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–æ—Ç–æ',reply_markup = types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_photo, is_edit)
        return 

def add_referral(referrer_id, referred_id):
    with conn:
        # all_amount = conn.execute("""
        #     SELECT COUNT(*) FROM referrals WHERE user_id = ? AND referred_user_id = ?
        # """, (referrer_id, referred_id))
        is_user_exists = conn.execute("""
            SELECT COUNT(*) FROM user_profiles WHERE user_id = ?
        """, (referred_id,)).fetchone()[0]
        if is_user_exists:
            bot.send_message(referred_id, f'–í—ã —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞.')
            return
        conn.execute("INSERT INTO referrals (user_id, referred_user_id) VALUES (?, ?)", (referrer_id, referred_id))
        conn.execute("""
            INSERT INTO referral_rewards (user_id, referral_count)
            VALUES (?, 1)
            ON CONFLICT(user_id) DO UPDATE SET referral_count = referral_count + 1
        """, (referrer_id,))
        bot.send_message(referred_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        bot.send_message(referrer_id, f"–ö –≤–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!")

#------------------------------------------------------------------------------------------------------------------------------------------
#–§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ù–ê–ö–û–ú–°–¢–í
#------------------------------------------------------------------------------------------------------------------------------------------

#–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω—è–µ—Ç —á—å—é-—Ç–æ –∞–Ω–∫–µ—Ç—É, –æ—Ç–º–µ—á–∞–µ–º —ç—Ç–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–µ —Å–Ω–æ–≤–∞
def mark_as_viewed(user_id, match_id):
    with conn:
        conn.execute('''
            INSERT INTO evaluations (evaluator_id, evaluated_id) VALUES (?, ?)
        ''', (user_id, match_id))
        conn.commit()
        
#–≤ –∫–∞–∫–∏—Ö-—Ç–æ —Å–ª—É—á–∞—è—Ö –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –æ—Ç–º–µ—Ç–∫–∏, —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
def remove_match(user_id, match_id):
    with conn:
        conn.execute('''
            DELETE FROM evaluations
            WHERE evaluator_id = ? AND evaluated_id = ?
        ''', (user_id, match_id))
        conn.commit()
        
#–ö–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ª—É—á—à–µ –∏—Ö –æ–±–Ω—É–ª—è—Ç—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—Ç—å –ø–∞–º—è—Ç—å 
def clear_evaluations_if_needed():
    with conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        row_count = conn.execute('SELECT COUNT(*) FROM evaluations').fetchone()[0]
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –±–æ–ª—å—à–µ 300,000, –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        if row_count >= 100000:
            conn.execute('DELETE FROM evaluations')
            conn.commit()

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.        
def find_matc(user_id, chat_id):
    with conn:
        result = conn.execute('SELECT preferences, gender  FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if result:
        prefs, user_gender = result
        with conn:
            result = conn.execute('''
                SELECT u.user_id, u.name, u.photo, u.bio, u.age, u.amount_of_wins, u.amount_of_pars, u.city
                FROM user_profiles u
                LEFT JOIN evaluations e ON u.user_id = e.evaluated_id AND e.evaluator_id = ?
                WHERE e.evaluated_id IS NULL
                AND u.user_id != ?
                AND u.city = (SELECT city FROM user_profiles WHERE user_id = ?)
                AND (u.gender = ? OR ? = 3)
                AND (u.preferences = ? OR u.preferences = 3)
                AND u.age BETWEEN (SELECT min_age FROM user_profiles WHERE user_id = ?) 
                            AND (SELECT max_age FROM user_profiles WHERE user_id = ?)
                AND (u.min_age <= (SELECT age FROM user_profiles WHERE user_id = ?)
                    AND u.max_age >= (SELECT age FROM user_profiles WHERE user_id = ?))
                AND u.name IS NOT NULL 
                AND u.photo IS NOT NULL 
                AND u.bio IS NOT NULL 
                AND u.age IS NOT NULL 
                AND u.amount_of_wins IS NOT NULL
                AND u.amount_of_pars IS NOT NULL
                ORDER BY u.last_online DESC
                LIMIT 1
            ''', (user_id, user_id, user_id, prefs, prefs, user_gender, user_id, user_id, user_id, user_id)).fetchone()
        if result:
            match_id, match_name, match_photo, match_bio, match_age, match_wins, match_pars, match_city= result
            match_text = f"{match_name}, {match_age}, {match_city} - {match_bio}\n{match_wins} –ø–æ–±–µ–¥ –∏–∑ {match_pars} –ë–∞—Ç—Ç–ª–æ–≤"
            markup = types.InlineKeyboardMarkup()
            btn_like = types.InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", callback_data=f"like_{match_id}")
            btn_dislike = types.InlineKeyboardButton("–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"dislike_{match_id}")
            btn_exit = types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data=f"exit_{match_id}")
            btn_report = types.InlineKeyboardButton("–ñ–∞–ª–æ–±–∞", callback_data=f"report_{match_id}")
            btn_message = types.InlineKeyboardButton("üíå", callback_data = f"message_{match_id}")
            markup.add(btn_like, btn_dislike, btn_message)
            markup.add(btn_exit, btn_report)
            mark_as_viewed(user_id,match_id)
            bot.send_photo(chat_id, match_photo, caption=match_text,reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(chat_id, "–í—Å–µ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π, —á–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!",reply_markup=dating_menu)
    else:
        bot.send_message(chat_id, f'–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile , —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É.')

#–µ—Å—Ç—å –º–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–π, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫. –≤—ã–Ω–µ—Å–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
def give_like(chat_id, user_id, match_id, evaluator_username, from_girl_to_man = False, with_message = False, message = ""):
    with conn:
        evaluator_profile = conn.execute('''
            SELECT name, photo, bio, age, amount_of_wins, amount_of_pars, city FROM user_profiles WHERE user_id = ?
        ''', (user_id,)).fetchone()
    if evaluator_profile:
        evaluator_name, evaluator_photo, evaluator_bio, ev_age, ev_wins, ev_pars, ev_city = evaluator_profile
        match_user_id = match_id
        if match_user_id in user_states and user_states[match_user_id] == 'banned':
            bot.send_message(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.')
        else:
            vzaim = types.InlineKeyboardMarkup()
            but_vzaim = types.InlineKeyboardButton(f'üëç', callback_data=f'vzaim {user_id} {evaluator_username}')
            but_dontlike = types.InlineKeyboardButton(f'üëé', callback_data=f'nevzaim {user_id}')
            vzaim.add(but_vzaim, but_dontlike)
            if (evaluator_username != None):
                if from_girl_to_man:
                    evaluator_text = f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ???||\(–µ—Å–ª–∏ –≤—ã –≤–∑–∞–∏–º–Ω–æ –ª–∞–π–∫–Ω–∏—Ç–µ ‚Äî –≤–∞–º –ø–æ–∫–∞–∂–µ—Ç—Å—è —é–∑–µ—Ä–Ω–µ–π–º\)||\n–ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n"
                    if with_message:
                        evaluator_text += f"{evaluator_name}, {ev_age}, {ev_city} \- {evaluator_bio}\n\n{ev_wins} –ø–æ–±–µ–¥ –∏–∑ {ev_pars} –ë–∞—Ç—Ç–ª–æ–≤\n\n–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µüíå: {message}"
                        bot.send_message(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',reply_markup=dating_menu)
                    else:
                        evaluator_text += f"{evaluator_name}, {ev_age}, {ev_city} \- {evaluator_bio}\n\n{ev_wins} –ø–æ–±–µ–¥ –∏–∑ {ev_pars} –ë–∞—Ç—Ç–ª–æ–≤"
                    bot.send_photo(match_user_id, evaluator_photo, caption=evaluator_text, reply_markup=vzaim, parse_mode="MarkdownV2")
                else:
                    evaluator_text = f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{evaluator_username}!\n–ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n"
                    if with_message:
                        evaluator_text += f"{evaluator_name}, {ev_age}, {ev_city} - {evaluator_bio}\n\n{ev_wins} –ø–æ–±–µ–¥ –∏–∑ {ev_pars} –ë–∞—Ç—Ç–ª–æ–≤\n\n–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µüíå: {message}"
                        
                    else:
                        evaluator_text += f"{evaluator_name}, {ev_age}, {ev_city} - {evaluator_bio}\n\n{ev_wins} –ø–æ–±–µ–¥ –∏–∑ {ev_pars} –ë–∞—Ç—Ç–ª–æ–≤"
                    bot.send_photo(match_user_id, evaluator_photo, caption=evaluator_text, reply_markup=vzaim)
            else:
                evaluator_text = f"–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {evaluator_name}!\n–ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n"
                evaluator_text += f"{evaluator_name}, {ev_age}, {ev_city} - {evaluator_bio}\n\n{ev_wins} –ø–æ–±–µ–¥ –∏–∑ {ev_pars} –ë–∞—Ç—Ç–ª–æ–≤"
                bot.send_photo(match_user_id, evaluator_photo, caption=evaluator_text, reply_markup=vzaim)
    find_matc(user_id,chat_id)

def give_vzaim(user_id, match_id, evaluator_username):
    with conn:
        evaluator_profile = conn.execute('''
        SELECT name, photo, bio, age, amount_of_wins, amount_of_pars, city FROM user_profiles WHERE user_id = ?
        ''', (user_id,)).fetchone()
    if evaluator_profile:
        evaluator_name, evaluator_photo, evaluator_bio, ev_age, ev_wins, ev_pars, ev_city = evaluator_profile
        with conn:
            result = conn.execute('SELECT user_id FROM user_profiles WHERE user_id = ?', (match_id,)).fetchone()
        if result:
            match_user_id = result
            if match_user_id in user_states and user_states[match_user_id] == 'banned':
                bot.send_message(user_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.')
            else:
                if evaluator_username != None:
                    evaluator_text = f"–£—Ä–∞! –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å @{evaluator_username}!\n\n–ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n"
                else:
                    evaluator_text = f"–£—Ä–∞! –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å @{evaluator_name}!\n\n–ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n"
                evaluator_text += f"{evaluator_name}, {ev_age}, {ev_city} - {evaluator_bio}\n\n{ev_wins} –ø–æ–±–µ–¥ –∏–∑ {ev_pars} –ë–∞—Ç—Ç–ª–æ–≤"
                bot.send_photo(match_user_id, evaluator_photo, caption=evaluator_text)
                with conn:
                    conn.execute('''
                        INSERT INTO evaluations (evaluator_id, evaluated_id) VALUES (?, ?)
                    ''', (user_id, match_id))
                    conn.commit()
                with conn:
                    conn.execute('''
                        INSERT INTO evaluations (evaluator_id, evaluated_id) VALUES (?, ?)
                    ''', (match_id, user_id))
                    conn.commit()
                # bot.send_message(user_id, f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!', reply_markup=start_menu)
    


#------------------------------------------------------------------------------------------------------------------------------------------
#–§–£–ù–ö–¶–ò–ò –î–õ–Ø –§–û–¢–û-–ë–ê–¢–¢–õ–û–í
#------------------------------------------------------------------------------------------------------------------------------------------

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—Ç–ª–∞, –∫–æ–≥–¥–∞ —É–∂–µ –Ω–∞—à–ª–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ 
def start_battle(part_1_id,part_2_id):
    start_time = int(time.time())
    end_time = start_time + 86400
    participant_1_photo = conn.execute('SELECT photo FROM user_profiles WHERE user_id = ?', (part_1_id,)).fetchone()[0]
    participant_2_photo = conn.execute('SELECT photo FROM user_profiles WHERE user_id = ?', (part_2_id,)).fetchone()[0]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞—Ç—Ç–ª —Å —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    with conn:
        conn.execute('''
            INSERT INTO battles (participant_1, participant_2, participant_1_photo, participant_2_photo, start_time, end_time)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (part_1_id, part_2_id, participant_1_photo, participant_2_photo, start_time, end_time))
        conn.commit()
        
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ 2–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞
def find_opponent_for_battle(user_id):
    with conn:
        user = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
    if user:
        user_gender = user[0]
        opponent = conn.execute('''
                SELECT battle_queue.user_id FROM battle_queue
                JOIN user_profiles ON battle_queue.user_id = user_profiles.user_id
                WHERE user_profiles.gender = ? AND battle_queue.user_id != ?
                ORDER BY battle_queue.join_time ASC
                LIMIT 1
            ''', (user_gender, user_id)).fetchone()
        if opponent:
            opponent_id = opponent[0]
            start_battle(user_id, opponent_id)
            with conn:
                res1 = conn.execute('SELECT name, age, photo FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
                res2 = conn.execute('SELECT name, age, photo FROM user_profiles WHERE user_id = ?', (opponent_id,)).fetchone()
                conn.execute('DELETE FROM battle_queue WHERE user_id IN (?, ?)', (user_id, opponent_id))
                conn.commit()
            if res1 and res2:
                name1, age1, photo1 = res1
                name2, age2, photo2  = res2
                bot.send_photo(user_id, photo2, f"–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n{name2}, {age2}")
                bot.send_photo(opponent_id,photo1, f"–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n{name1}, {age1}")
            else:
                bot.send_message(user_id, '–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ —Å –±–∞—Ç—Ç–ª–æ–º. –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
                bot.send_message(opponent_id, '–∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ —Å –±–∞—Ç—Ç–ª–æ–º. –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
        else:
            bot.send_message(user_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–∞—Ç—Ç–ª –Ω–∞—á–Ω–µ—Ç—Å—è.")
        
#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞ 2–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ 
def join_battle(message):
    current_time = int(time.time())
    user_id = message.from_user.id
    chat_id = message.chat.id
    with conn:
        active_battles_count = conn.execute('''
            SELECT COUNT(*)
            FROM battles
            WHERE (participant_1 = ? OR participant_2 = ?) AND end_time > ?
        ''', (user_id, user_id, current_time)).fetchone()[0]
        if active_battles_count >= 1:
            bot.send_message(chat_id, f'–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞—Ç—Ç–ª–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è')
            return 
    if is_profile_exists(message):
        with conn:
            in_battle = conn.execute('SELECT 1 FROM battle_queue WHERE user_id = ?', (user_id,)).fetchone()
            if in_battle:
                bot.send_message(chat_id, "–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ-–±–∞—Ç—Ç–ª–µ")
                return 
            conn.execute('INSERT INTO battle_queue (user_id, join_time) VALUES (?, ?)', (user_id, int(time.time())))
            conn.commit()
        bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–æ—Ç–æ-–±–∞—Ç—Ç–ª–µ! –ñ–¥–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...")
        find_opponent_for_battle(user_id)
        
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—Ç–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Å–µ–π—á–∞—Å —É—á–∞—Å—Ç–≤—É–µ—à—å 

def my_battles(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    battles = conn.execute('''
        SELECT battle_id, participant_1, participant_2, participant_1_photo, participant_2_photo, end_time, votes_participant_1, votes_participant_2
        FROM battles
        WHERE (participant_1 = ? OR participant_2 = ?) AND end_time > ?
    ''', (user_id, user_id, int(time.time()))).fetchall()
    if not battles:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—Ç–ª–æ–≤.")
    else:
        for battle in battles:
            battle_id, participant_1, participant_2,photo1, photo2, end_time, votes1, votes2 = battle
            if participant_1 == user_id:
                opponent_id = participant_2
                yourvotes = votes1
                oppvotes = votes2
                opphoto = photo2
            else:
                opponent_id = participant_1
                yourvotes = votes2
                oppvotes = votes1
                opphoto = photo1
                
            opponent = conn.execute('SELECT name FROM user_profiles WHERE user_id = ?', (opponent_id,)).fetchone()
            opponent_name = opponent[0] if opponent else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            bot.send_photo(chat_id,opphoto,caption= f"–ë–∞—Ç—Ç–ª —Å {opponent_name}\n–ì–æ–ª–æ—Å–æ–≤ –∑–∞ –≤–∞—Å: {yourvotes}\n–ì–æ–ª–æ—Å–æ–≤ –∑–∞ {opponent_name}: {oppvotes}")
            
#–ë–∞—Ç—Ç–ª—ã –¥–ª—è—Ç—Å—è 24 —á–∞—Å–∞. –ß—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–æ–≤–µ—Ä—è—é—â—É—é –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —â–∞—Å –∫–∞–∫–æ–π-—Ç–æ –±–∞—Ç—Ç–ª, —è –Ω–∞–ø–∏—Å–∞–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é. –ù–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
def check_for_completed_battles():
    current_time = int(time.time())
    finished_battles = conn.execute('''
        SELECT battle_id, participant_1, participant_2, votes_participant_1, votes_participant_2
        FROM battles
        WHERE end_time <= ? AND status = ?
    ''', (current_time, 'active')).fetchall()
    for battle in finished_battles:
        battle_id, participant_1, participant_2, votes_1, votes_2 = battle
        if votes_1 > votes_2:
            winner_id = participant_1
            loser_id = participant_2
        elif votes_2 > votes_1:
            winner_id = participant_2
            loser_id = participant_1
        else:
            winner_id = None
        conn.execute('''
            UPDATE battles
            SET status = 'completed'
            WHERE battle_id = ?
        ''', (battle_id,))
        clean_up_votes(battle_id)
        notify_battle_result(participant_1, participant_2, winner_id, votes_1, votes_2)
        
emoji_dict = {
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£'
}

#–ü–æ–∏—Å–∫ —Ç–æ–ø5 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ –≤ –±–∞—Ç—Ç–ª–∞—Ö 
def top_5_participants(message):
    flag = True
    chat_id = message.chat.id
    with conn:
        top_users = conn.execute('''
            SELECT name, age, photo, amount_of_wins 
            FROM user_profiles 
            ORDER BY amount_of_wins DESC
            LIMIT 5
        ''').fetchall()
    if top_users and len(top_users)==5:
        media_group = []
        text = ''
        i = 0
        for user in top_users:
            i += 1
            name, age, photo, wins = user
            if name and age and photo and (wins >= 0):
                media_group.append(types.InputMediaPhoto(photo))
                text += f'{emoji_dict.get(i,i)} –ú–µ—Å—Ç–æ - {name}, {age}, {wins} –ø–æ–±–µ–¥\n'
            else:
                flag = False
                bot.send_message(chat_id, f'–£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ª—é–¥–µ–π –∏–∑ —Ç–æ–ø–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞. –°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¢–æ–ø 5')
                break
                
        if flag:
            bot.send_media_group(chat_id,media_group)
            bot.send_message(chat_id,text)
    else:
        bot.send_message(chat_id,f'–ü–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞')

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç—Ç–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º 
def show_next_battle(chat_id, user_id):
    current_time = int(time.time())
    with conn:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞—Ç—Ç–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
        battle = conn.execute('''
            SELECT battle_id, participant_1, participant_2, end_time, participant_1_photo, participant_2_photo
            FROM battles
            WHERE end_time > ? AND battle_id NOT IN (SELECT battle_id FROM votes WHERE user_id = ?)
            ORDER BY end_time ASC
            LIMIT 1
        ''', (current_time, user_id)).fetchone()
    if battle:
        battle_id, left_user_id, right_user_id, end_time, photo1, photo2 = battle
        left_user = conn.execute('SELECT name, age FROM user_profiles WHERE user_id = ?', (left_user_id,)).fetchone()
        right_user = conn.execute('SELECT name, age FROM user_profiles WHERE user_id = ?', (right_user_id,)).fetchone()
        if left_user and right_user:
            left_username, age1 = left_user
            right_username, age2 = right_user
            media_group = [
            types.InputMediaPhoto(photo1),
            types.InputMediaPhoto(photo2)
            ]
            bot.send_media_group(
                user_id,media_group
            )
            bot.send_message(user_id,f'–ó–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—à—å?\n–ù–∞ 1 —Ñ–æ—Ç–æ: {left_username}, {age1}\n–ù–∞ 2 —Ñ–æ—Ç–æ: {right_username}, {age2}', reply_markup=create_battle_vote_exit_markup(battle_id, left_username,right_username))
        else:
            bot.send_message(chat_id, f'–Ω–µ—Ç –±–∞—Ç—Ç–ª–æ–≤ {left_user}, {right_user}, {left_user_id}, {right_user_id}')
    else:
        bot.send_message(user_id, f'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç—Ç–ª–æ–≤.')
        
#–∫–æ–≥–¥–∞ –±–∞—Ç—Ç–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
def notify_battle_result(participant_1, participant_2, winner_id, votes1, votes2):
    with conn:
        res1 = conn.execute('SELECT name, photo, age FROM user_profiles WHERE user_id = ?', (participant_1,)).fetchone()
        res2 = conn.execute('SELECT name, photo, age FROM user_profiles WHERE user_id = ?', (participant_2,)).fetchone()
    if res1 and res2:
        name1,photo1,age1 = res1
        name2, photo2, age2 = res2
        if winner_id:
            if participant_1 == winner_id:
                with conn:
                    conn.execute('UPDATE user_profiles SET amount_of_wins = amount_of_wins + 1 WHERE user_id = ?', (participant_1,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_1,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_2,))
                bot.send_photo(participant_1,photo2, caption=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name2}, {age2} —Å–æ —Å—á–µ—Ç–æ–º {votes1}-{votes2}')
                bot.send_photo(participant_2,photo1, caption=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name1}, {age1} —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
            else:
                with conn:
                    conn.execute('UPDATE user_profiles SET amount_of_wins = amount_of_wins + 1 WHERE user_id = ?', (participant_2,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_2,))
                    conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_1,))
                bot.send_photo(participant_2,photo1, caption=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–π–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name1}, {age1} —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
                bot.send_photo(participant_1,photo2, caption=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–∞—Ç—Ç–ª–µ –ø—Ä–æ—Ç–∏–≤ {name2}, {age2} —Å–æ —Å—á–µ—Ç–æ–º {votes1}-{votes2}')
        else:
            with conn:
                conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_2,))
                conn.execute('UPDATE user_profiles SET amount_of_pars = amount_of_pars + 1 WHERE user_id = ?', (participant_1,))
            bot.send_photo(participant_2,photo1, caption=f'–ë–∞—Ç—Ç–ª –ø—Ä–æ—Ç–∏–≤ {name1}, {age1} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
            bot.send_photo(participant_1,photo2, caption=f'–ë–∞—Ç—Ç–ª –ø—Ä–æ—Ç–∏–≤ {name2}, {age2} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π —Å–æ —Å—á–µ—Ç–æ–º {votes2}-{votes1}')
        
#—Å–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ –±–∞—Ç—Ç–ª–æ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
def create_battle_vote_exit_markup(battle_id, left_name, right_name):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(f"{left_name}", callback_data=f"vote_left_{battle_id}"),
        types.InlineKeyboardButton(f"{right_name}", callback_data=f"vote_right_{battle_id}")
    )
    markup.row(types.InlineKeyboardButton("–í—ã—Ö–æ–¥", callback_data=f"exit_battle"))
    return markup

#–§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –æ—á–∏—â–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –≥–æ–ª–æ—Å–∞–º–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ —É–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–º –±–∞—Ç—Ç–ª–∞–º
def clean_up_votes(battle_id):
    with conn:
        conn.execute('''
            DELETE FROM votes
            WHERE battle_id = ?
        ''', (battle_id,))
        conn.commit()

#------------------------------------------------------------------------------------------------------------------------------------------
#–§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô –ò –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
#------------------------------------------------------------------------------------------------------------------------------------------

import json
import telebot

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_balance(user_id, amount):
    # print(user_id, amount)
    with conn:
        conn.execute('UPDATE user_profiles SET balance = balance + ? WHERE  user_id = ?',(amount, user_id,))
    pass

#–ø–æ –∫–æ–º–º–∞–Ω–¥–µ pay –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ 
@bot.message_handler(commands=['pay'])
def request_payment(message):
    if is_profile_verified(message.from_user.id):
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(
            types.InlineKeyboardButton("100 —Ä—É–±–ª–µ–π", callback_data="pay_100"),
            types.InlineKeyboardButton("500 —Ä—É–±–ª–µ–π", callback_data="pay_500"),
            types.InlineKeyboardButton("1000 —Ä—É–±–ª–µ–π", callback_data="pay_1000"),
            types.InlineKeyboardButton("5000 —Ä—É–±–ª–µ–π", callback_data="pay_5000"),
            types.InlineKeyboardButton("20000 —Ä—É–±–ª–µ–π", callback_data="pay_20000")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç! –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /verify')
    

#–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç—å), —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂
@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_payment_choice(call):
    if call.from_user.id not in payloads_ids:
        amount = int(call.data.split('_')[1])
        invoice_payload = f"payment_{call.message.chat.id}_{amount}"
        prices = [types.LabeledPrice("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", amount * 100)]
        provider_data = {
            "receipt": {
                "items": [
                    {
                        "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                        "quantity": "1.00",
                        "amount": {
                            "value": str(amount),
                            "currency": "RUB"
                        },
                        "vat_code": "1"
                    }
                ]
            }
        }
        invoice_message = bot.send_invoice(
            chat_id=call.message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} —Ä—É–±–ª–µ–π",
            invoice_payload=invoice_payload,
            provider_token=TELEGRAM_PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            need_email=True,
            send_email_to_provider=True,
            provider_data=json.dumps(provider_data)  # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        )
        payloads_ids[call.from_user.id] = invoice_message.message_id
    else:
        markup_close = types.ReplyKeyboardMarkup(resize_keyboard=True)
        but_close = types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å")
        but_dont_close = types.KeyboardButton("–Ø –æ–ø–ª–∞—á—É –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—á–µ—Ç")
        markup_close.add(but_close, but_dont_close)
        bot.send_message(call.message.chat.id, f'–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å—á–µ—Ç–∞, –ø–æ–∫–∞ –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç–µ/–∑–∞–∫—Ä–æ–µ—Ç–µ —Å—Ç–∞—Ä—ã–µ\n–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–∫—Ä—ã—Ç—å"', reply_markup = markup_close)

@bot.pre_checkout_query_handler(lambda query: True)
def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º invoice_payload –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    invoice_payload = pre_checkout_q.invoice_payload

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ payload_ids
    user_id = pre_checkout_q.from_user.id
    if user_id in payloads_ids:
        expected_payload = payloads_ids[user_id]

        # –†–∞–∑–±–∏—Ä–∞–µ–º payload, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å amount
        payload_parts = invoice_payload.split('_')
        if len(payload_parts) == 3 and payload_parts[0] == 'payment':
            bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
            return
        else:
            bot.answer_pre_checkout_query(pre_checkout_q.id, ok=False, error_message="–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            return
    else:
        bot.answer_pre_checkout_query(pre_checkout_q.id, ok=False, error_message="–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

#–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ç–∞—Ç–∏–ª –∫–∞–∫–æ–π-—Ç–æ —Å—á–µ—Ç, —Å–º–æ—Ç—Ä–∏–º, –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É —ç—Ç–æ—Ç —Å—á–µ—Ç –±—ã–ª –∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –µ–≥–æ –±–∞–ª–∞–Ω—Å 
@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
    invoice_payload = message.successful_payment.invoice_payload
    payload_parts = invoice_payload.split('_')
    try:
        to_delete = payloads_ids[message.from_user.id]
    except KeyError:
        amount = int(payload_parts[2])
        update_balance(message.from_user.id, amount)
        bot.send_message(message.chat.id, f'–í–∏–¥–∏–º–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —á—É–∂–æ–π —Å—á–µ—Ç, –Ω–æ —ç—Ç–æ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n–¢–∞–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–ª–æ–∂–Ω–µ–µ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ. –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±–ª–µ–π')
    if len(payload_parts) == 3 and payload_parts[0] == 'payment':
        amount = int(payload_parts[2])
        update_balance(message.from_user.id, amount)
        bot.delete_message(message.chat.id, to_delete)
        payloads_ids.pop(message.from_user.id, None)
        bot.send_message(message.chat.id,f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±–ª–µ–π",reply_markup=start_menu)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–≤–æ–π—Å.")


#------------------------------------------------------------------------------------------------------------------------------------------
#–§–£–ù–ö–¶–ò–û–ù–ê–õ –ë–û–¢–ê. IF MESSAGE.TEXT == X DO FUNC(1) ELSE DO FUNC(2)
#------------------------------------------------------------------------------------------------------------------------------------------
#–æ—Ç—Å—é–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥/—Ç–µ–∫—Å—Ç–∞/–Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–æ–º. –ü—Ä–∏–º–µ—Ä–Ω–æ –≤—Å–µ –∏–º–µ–µ—Ç –≤–∏–¥ if —Ç–µ–∫—Å—Ç == x –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é func1, –∏–Ω–∞—á–µ —Ñ—É–Ω–∫—Ü–∏—é func2.


#–∫–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=['start'])
def handle_start(message):
    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    user_id = message.from_user.id
    if referrer_id and referrer_id.isdigit() and int(referrer_id) != user_id:
        add_referral(referrer_id=int(referrer_id), referred_id=user_id)
    elif referrer_id and referrer_id.isdigit() and int(referrer_id) == user_id:
        bot.send_message(user_id, "–ù–µ–ª—å–∑—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
    update_last_online(message)
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–î–∞–ª–µ–µ üëâ",callback_data='next')
    markup.add(btn)
    bot.send_message(chat_id,f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Twinkl - –°–µ—Ä–≤–∏—Å –¥–æ—Ä–æ–≥–∏—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤!\n\n–ó–Ω–∞–∫–æ–º—å—Å—è –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É <i>–ª–∞–π–∫ —Å —Ü–µ–Ω–æ–π - –∏–Ω—Ç–µ—Ä–µ—Å —Å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ–º</i>", reply_markup=markup, parse_mode='HTML')

#–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã start
@bot.callback_query_handler(func=lambda call: call.data == 'next')
def send(call):
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('–ü—Ä–∏–Ω–∏–º–∞—é!üëå', callback_data= 'ready')
    markup.add(btn)
    bot.send_message(call.message.chat.id, f'‚ùï–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É\n–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - –æ–ø–∞—Å–Ω–∞—è —Å—Ä–µ–¥–∞, –≥–¥–µ –ª—é–¥–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –∑–∞ –¥—Ä—É–≥–∏—Ö\n\n–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ](https://docs.google.com/document/d/e/2PACX-1vTIQFG3VuFD4XnyP9GDER9gYJJVew4dwDXvzxgurOn376VKE3KAUSh6U9-pRUHMwX9aygCapkC5iDKu/pub) –∏ [–ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/document/d/e/2PACX-1vRm9ZbciP3xHc0QniRrb_EijvhYW3Lm_2BfyOdvGIjQ1rPrUvBXybhiMaCsE-ac2QJVr685N4XwQ-af/pub)', reply_markup=markup, parse_mode='Markdown')
    
#—Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã start
@bot.callback_query_handler(func=lambda call: call.data == 'ready')
def send2(call):
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.send_message(call.message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ—é –ø–æ—á—Ç—É\n–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /verify\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 - @help_username_bot')

#–∫–æ–º–∞–Ω–¥–∞ verify - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –ø–æ—á—Ç–µ 
@bot.message_handler(commands=['verify'])
def verif(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if get_status(user_id) == 'banned':
        bot.send_message(user_id, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
    else:
        if is_profile_verified(user_id):
            bot.send_message(chat_id,'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω', reply_markup=start_menu)
        else:
            user_states[user_id] = 'wait email'
            bot.send_message(chat_id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É')

#–∫–æ–º–∞–Ω–¥–∞ create_profile - —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É
@bot.message_handler(commands=['create_profile'])
def make_profile(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if get_status(user_id) == 'banned':
        bot.send_message(user_id, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
    else:
        if is_profile_verified(user_id):
            with conn:
                conn.execute('''
                    DELETE FROM evaluations
                    WHERE evaluator_id = ? OR evaluated_id = ?
                ''', (user_id, user_id))
                conn.commit()
            with conn:
                conn.execute('''
                             DELETE FROM battle_queue WHERE user_id = ?
                             ''', (user_id,))
                conn.commit()
            with conn:
                result = conn.execute('SELECT user_id FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
            if result is None:
                with conn:
                    conn.execute('''
                        INSERT INTO user_profiles (user_id) VALUES (?)
                    ''', (user_id,))
            bot.send_message(chat_id,'–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É!\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',reply_markup = types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, get_name, is_edit = False)
        else:
            bot.send_message(chat_id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç! –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /verify')

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –±–∞—Ç—Ç–ª–µ. –≥–æ–ª–æ—Å –∑–∞ –ª–µ–≤–æ–≥–æ/–ø—Ä–∞–≤–æ–≥–æ, –≤—ã—Ö–æ–¥ –∏–∑ –±–∞—Ç—Ç–ª–æ–≤. 
@bot.callback_query_handler(func=lambda call: call.data.startswith('vote_') or call.data == 'exit_battle')
def handle_vote_or_exit(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    if get_status(user_id) == 'banned':
        bot.send_message(user_id, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
    else:
        if is_profile_verified(user_id):
            bot.delete_message(chat_id, call.message.message_id)
            if call.data == 'exit_battle':
                bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –±–∞—Ç—Ç–ª–æ–≤.")
                return
            battle_id = int(call.data.split('_')[-1])
            vote_side = call.data.split('_')[1]
            with conn:
                existing_vote = conn.execute('''
                    SELECT vote_side FROM votes WHERE user_id = ? AND battle_id = ?
                ''', (user_id, battle_id)).fetchone()
                if existing_vote:
                    bot.send_message(chat_id, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º –±–∞—Ç—Ç–ª–µ.")
                    return
                conn.execute('''
                    INSERT INTO votes (user_id, battle_id, vote_side) VALUES (?, ?, ?)
                ''', (user_id, battle_id, vote_side))
                if vote_side == 'left':
                    conn.execute('UPDATE battles SET votes_participant_1 = votes_participant_1 + 1 WHERE battle_id = ?', (battle_id,))
                else:
                    conn.execute('UPDATE battles SET votes_participant_2 = votes_participant_2 + 1 WHERE battle_id = ?', (battle_id,))
                conn.commit()
            show_next_battle(chat_id,user_id)
        else:
            bot.send_message(chat_id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç! –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /verify')

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –∞–Ω–∫–µ—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. —Å—Ç–∞–≤–∏–º –ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫/–∏—Ç–¥.
@bot.callback_query_handler(func=lambda call: call.data.startswith(('like_', 'dislike_', 'exit', 'report', 'message')))
def handle_evaluation(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    if get_status(user_id) == 'banned':
        bot.send_message(user_id, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
    else:
        if is_profile_verified(user_id):
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            with conn:
                user_gender = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
            user_gender = user_gender[0]
                # user_gender = int(user_gender)
            if call.data.startswith('like_'):
                match_id = int(call.data.split('_')[1])
                with conn:
                    match_gender = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (match_id,)).fetchone()
                match_gender = match_gender[0]
                    # match_gender = int(match_gender)
                if user_gender == 1 and match_gender == 2:
                    with conn: 
                        balance = conn.execute('SELECT balance FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
                    balance = int(balance[0])
                    if balance >= 50:
                        bot.send_message(chat_id,f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∞–π–∫!\n–ë–∞–ª–∞–Ω—Å: {balance - 50}', reply_markup=dating_menu)
                        with conn:
                            conn.execute('''UPDATE user_profiles SET balance = balance - 50 WHERE user_id = ?''', (user_id,))
                        give_like(chat_id, user_id, match_id, call.from_user.username)
                    else:
                        bot.send_message(chat_id, "–°—Ç–æ–ø! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n–ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ª–∞–π–∫ –±—ã–ª –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º –∏ –∑–Ω–∞—á–∏–º—ã–º. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —á–µ—Ç–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–ª–∞—Ç–Ω—ã–µ –ª–∞–π–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—à, —Å–æ–∑–¥–∞–≤–∞—è —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —à–∞–≥ –±—ã–ª –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω!\n\n–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ - 50 —Ä—É–±–ª–µ–π, –∫–∞–∑–∞–ª–æ—Å—å –±—ã - —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Ç—Ä–∞—Ç–∏—Ç—å 50 —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞–∂–¥—É—é –∞–Ω–∫–µ—Ç—É?...\n\nüëâ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay", reply_markup=start_menu)
                        remove_match(user_id, match_id)
                else:
                    give_like(chat_id, user_id, match_id, call.from_user.username, (user_gender == 2 and match_gender == 1))
            elif call.data.startswith('message_'):
                match_id = int(call.data.split('_')[1])
                user_states[user_id] = f'wait message {match_id}'
                bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å –ª–∞–π–∫–æ–º\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª - 0")
            elif call.data.startswith('dislike_'):
                # match_id = int(call.data.split('_')[1])
                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç–µ
                find_matc(user_id,chat_id)
            elif call.data.startswith('exit_'):
                match_id = int(call.data.split('_')[1])
                remove_match(user_id, match_id)
                bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤.",reply_markup=dating_menu)
            elif call.data.startswith('report_'):
                bot.send_message(user_id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∂–∞–ª–æ–±—É! –°–∫–æ—Ä–æ –º—ã –µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.')
                match_id = int(call.data.split('_')[1])
                with conn:
                    result = conn.execute('''
                    SELECT name, photo, gender, bio, age 
                    FROM user_profiles 
                    WHERE user_id = ?
                    ''', (match_id,)).fetchone()
                name, photo, gender, bio, age = result
                bot.send_photo(671084247,photo,caption= f'–ñ–∞–ª–æ–±–∞ –Ω–∞ {match_id}. –ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n{name}, {age}\n\n{bio}\n\n–ß—Ç–æ–±—ã –µ–≥–æ –∑–∞–±–∞–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É ban match_id')
                bot.send_photo(7515729537,photo,caption= f'–ñ–∞–ª–æ–±–∞ –Ω–∞ {match_id}. –ï–≥–æ –∞–Ω–∫–µ—Ç–∞:\n\n{name}, {age}\n\n{bio}\n\n–ß—Ç–æ–±—ã –µ–≥–æ –∑–∞–±–∞–Ω–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É ban match_id')
                find_matc(user_id, chat_id)
        else:
            bot.send_message(chat_id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç! –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /verify')

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤–∑–∞–∏–º–Ω—ã–π/–Ω–µ–≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ (–∫–æ–≥–¥–∞ —Ç–µ–±—è –ª–∞–π–∫–∞—é—Ç - –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∫–µ—Ç–æ–π –ª–∞–π–∫–Ω–≤—É—à–µ–≥–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –¥–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å)
@bot.callback_query_handler(func=lambda call: call.data.startswith(('vzaim', 'nevzaim')))
def handle_evaluation(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    match_id = int(call.data.split(' ')[1])
    if call.data.startswith('vzaim'):
        with conn:
            user_gender = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
        user_gender = user_gender[0]
        with conn:
            match_gender = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (match_id,)).fetchone()
        match_gender = match_gender[0]
        if user_gender == 1 and match_gender == 2:
            with conn: 
                balance = conn.execute('SELECT balance FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
            balance = int(balance[0])
            if balance >= 25:
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                with conn:
                    conn.execute('''UPDATE user_profiles SET balance = balance - 25 WHERE user_id = ?''', (user_id,))
                    username = (call.data.split(" ")[2])
                bot.send_message(chat_id,f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!\n–Æ–∑–µ—Ä–Ω–µ–π–º –¥–µ–≤—É—à–∫–∏: @{username}\n–ë–∞–ª–∞–Ω—Å: {balance - 25}', reply_markup=dating_menu)
                give_vzaim(user_id, match_id, call.from_user.username)
            else:
                bot.send_message(chat_id, f'üí¨ –í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ ‚Äî —à–∞–≥ –Ω–∞–≤—Å—Ç—Ä–µ—á—É!\n\n–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ —Å—Ç–æ–∏—Ç –≤ 2 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ –æ–±—ã—á–Ω–æ–≥–æ. –ú—ã —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é —Ç–µ–º, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å—é –≤—Å–µ–º –ø–æ–¥—Ä—è–¥. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞–∂–¥—ã–π –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ –±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–º.\n\n–í—Å–µ–≥–æ –ª–∏—à—å 25 —Ä—É–±–ª–µ–π, –Ω–æ –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –æ—Ç–¥–∞—Ç—å –∏—Ö –ª—é–±–æ–π?...\n\nüëâ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay', reply_markup=start_menu)
        else:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            bot.send_message(chat_id,f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫!', reply_markup=dating_menu)
            give_vzaim(user_id, match_id, call.from_user.username)
    else:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        with conn:
            conn.execute('''
                INSERT INTO evaluations (evaluator_id, evaluated_id) VALUES (?, ?)
            ''', (user_id, match_id))
            conn.commit()
        with conn:
            conn.execute('''
                INSERT INTO evaluations (evaluator_id, evaluated_id) VALUES (?, ?)
            ''', (match_id, user_id))
            conn.commit()

@bot.callback_query_handler(func=lambda call: call.data in ["reward_like", "reward_cash", "invite_more"])
def handle_reward_buttons(call):
    user_id = call.from_user.id
    cursor = conn.execute("SELECT referral_count FROM referral_rewards WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    referral_count = row[0] if row else 0

    if call.data == "reward_like":
        if referral_count >= 3:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∞–π–∫ –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            conn.execute("UPDATE referral_rewards SET referral_count = referral_count - 3 WHERE user_id = ?", (user_id,))
            update_balance(user_id, 50)  # 50 —Ä—É–±–ª–µ–π = —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞
            bot.send_message(user_id, "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∞–π–∫!")
        else:
            bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã.")
    elif call.data == "reward_cash":
        if referral_count >= 100:
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            conn.execute("UPDATE referral_rewards SET referral_count = referral_count - 100 WHERE user_id = ?", (user_id,))
            bot.send_message(user_id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ 300‚ÇΩ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
            bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É 300‚ÇΩ.")
        else:
            bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –Ω–∞–≥—Ä–∞–¥—ã.")
    elif call.data == "invite_more":
        referral_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        bot.send_message(user_id, f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {referral_link}")
                        
#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç. —Ñ–æ—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É, —É –Ω–µ–≥–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç. –≤ –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if get_status(user_id) == 'banned':
        bot.send_message(user_id, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
    else:
        bot.send_message(chat_id, f'–ó–∞—á–µ–º –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ?',reply_markup=start_menu)
            
#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É
@bot.message_handler(content_types=['text'])
def answer(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    is_profile_verified(user_id)
    update_last_online(message)
    if get_status(user_id) == 'banned':
        bot.send_message(user_id, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
    else:
        if user_id in user_states and user_states[user_id] == 'wait email':
            email = message.text
            if validate_email(email) and my_valid_email(email): 
                code = ''
                for i in range(6):
                    x = str(randint(0,9))
                    code += x
                with conn:
                    last_sent = conn.execute('SELECT last_email_send FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
                if last_sent != (None,) and int(time.time()) - last_sent[0] < 60*2:
                    bot.send_message(user_id, '–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–∏—Å–µ–º\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã (—Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–¥–∞)')
                    user_states[user_id] = 'wait email'
                else:
                    bot.send_message(chat_id, '–í–∞–º –Ω–∞ –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É\n\n–ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏—à–µ–ª - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º"!\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 - @help_username_bot')
                    with conn:
                        conn.execute('UPDATE user_profiles SET last_email_send = ? WHERE user_id = ?', (int(time.time()), user_id,))
                    send_verification_email(email, code, user_id)
                    verif_codes[user_id] = code
                    user_states[user_id] = f'wait code {email}'
            else:
                bot.send_message(chat_id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ—á—Ç—É. –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ivanov.i.i@edu.mirea.ru\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 - @help_username_bot')
                user_states[user_id] = 'wait email'
        elif user_id in user_states and user_states[user_id].startswith('wait code'):
            code = message.text
            if code == verif_codes[user_id]:
                email = user_states[user_id].split()[2]
                with conn:
                    conn.execute('UPDATE user_profiles SET email = ? WHERE user_id = ?', (email, user_id,))
                bot.send_message(message.chat.id, "–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ü—Ä–∏—è—Ç–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ üòâ\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /create_profile",reply_markup=start_menu)
                user_states[user_id] = ''
            else:
                bot.send_message(chat_id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥!\n\n–û–±—ã—á–Ω–æ –∫–æ–¥ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–∞—à—É –ª–∏—á–Ω—É—é –ø–æ—á—Ç—É (mail.ru, gmail, –∏—Ç–¥), –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –ú–ò–†–≠–ê. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º"!\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 - @help_username_bot')
                user_states[user_id] = 'wait email'
        if (is_profile_verified(user_id)):
            if user_id in user_states and user_states[user_id].startswith('wait message'):
                evaluator_username = message.from_user.username
                match_id = user_states[user_id].split()[2]
                user_states[user_id] = ''
                with conn:
                    user_gender = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
                    user_gender = user_gender[0]
                    match_gender = conn.execute('SELECT gender FROM user_profiles WHERE user_id = ?', (match_id,)).fetchone()
                    match_gender = match_gender[0]
                if message.text == "0":
                    user_states[user_id] = ''
                    remove_match(user_id, match_id)
                    find_matc(user_id, chat_id)
                else:
                    if (user_gender == 1 and match_gender == 2):
                        with conn:
                            balance = conn.execute('SELECT balance FROM user_profiles WHERE user_id = ?', (user_id,)).fetchone()
                        balance = int(balance[0])
                        if balance >= 50:
                            bot.send_message(chat_id,f'–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–∞–π–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n–ë–∞–ª–∞–Ω—Å: {balance - 50}', reply_markup=dating_menu)
                            with conn:
                                conn.execute('''UPDATE user_profiles SET balance = balance - 50 WHERE user_id = ?''', (user_id,))
                            give_like(chat_id, user_id, match_id, message.from_user.username, (user_gender == 2 and match_gender == 1), True, message.text)
                        else:
                            bot.send_message(chat_id, "–°—Ç–æ–ø! –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n–ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Ç–∞–∫, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ª–∞–π–∫ –±—ã–ª –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º –∏ –∑–Ω–∞—á–∏–º—ã–º. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —á–µ—Ç–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–ª–∞—Ç–Ω—ã–µ –ª–∞–π–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä—Ç–Ω–µ—Ä—à, —Å–æ–∑–¥–∞–≤–∞—è —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —à–∞–≥ –±—ã–ª –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–º –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–º–∏, –∫—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω!\n\n–¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ - 50 —Ä—É–±–ª–µ–π, –∫–∞–∑–∞–ª–æ—Å—å –±—ã - —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ, –Ω–æ –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —Ç—Ä–∞—Ç–∏—Ç—å 50 —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞–∂–¥—É—é –∞–Ω–∫–µ—Ç—É?...\n\nüëâ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay", reply_markup=start_menu)
                            remove_match(user_id, match_id)
                    else:
                        give_like(chat_id, user_id, match_id, message.from_user.username, (user_gender == 2 and match_gender == 1), True, message.text)
            else:
                if message.text == '–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ‚ù§Ô∏è':
                    bot.send_message(chat_id, f"–í—ã –≤ –º–µ–Ω—é –ó–Ω–∞–∫–æ–º—Å—Ç–≤", reply_markup=dating_menu)
                elif message.text == '–ë–∞—Ç—Ç–ª –§–æ—Ç–æ üî•':
                    check_for_completed_battles()
                    bot.send_message(chat_id,f'–í—ã –≤ –º–µ–Ω—é –§–æ—Ç–æ-–ë–∞—Ç—Ç–ª–æ–≤',reply_markup=battle_menu)
                elif message.text == '–ù–∞–∑–∞–¥':
                    bot.send_message(chat_id, f"–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=start_menu)
                elif message.text == '–ú–æ—è –ê–Ω–∫–µ—Ç–∞':
                    flag = is_profile_exists(message)
                    if flag:
                        with conn:
                            result = conn.execute('''
                                SELECT name, photo, gender, bio, age, amount_of_wins, amount_of_pars, city, balance
                                FROM user_profiles 
                                WHERE user_id = ?
                                ''', (user_id,)).fetchone()
                        name, photo_data, gender, bio, age, am_wins, am_pars, city, balance = result
                        if photo_data:
                            bot.send_photo(message.chat.id, photo_data, caption = f'{name}, {age}, {city} - {bio}\n\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ë–∞—Ç—Ç–ª–∞—Ö: {am_wins} –ø–æ–±–µ–¥ –∏–∑ {am_pars} –ë–∞—Ç—Ç–ª–æ–≤\n\n–í–∞—à –±–∞–ª–ª–∞–Ω—Å: {balance} (–í–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º)\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile')
                elif message.text == '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã':
                    flag = is_profile_exists(message)
                    if flag:
                        find_matc(user_id,chat_id)
                elif message.text == '–ö –ê–Ω–∫–µ—Ç–µ':
                    bot.send_message(chat_id, f'–í—ã –≤ –º–µ–Ω—é –ó–Ω–∞–∫–æ–º—Å—Ç–≤!',reply_markup=dating_menu)
                #—Ç—É—Ç –¥–ª—è –±–∞—Ç–ª–∞ —Ñ–æ—Ç–æ–∫
                elif message.text == '–ú–æ–π –ü—Ä–æ—Ñ–∏–ª—å':
                    flag = is_profile_exists(message)
                    if flag:
                        with conn:
                            result = conn.execute('''
                                SELECT name, photo, gender, age, amount_of_wins, amount_of_pars, city, balance
                                FROM user_profiles 
                                WHERE user_id = ?
                                ''', (user_id,)).fetchone()
                        name, photo_data, gender, age, am_wins, am_pars, city, balance = result
                        if photo_data:
                            bot.send_photo(message.chat.id, photo_data, caption = f'{name}, {age}, {city}\n\n–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ë–∞—Ç—Ç–ª–∞—Ö: {am_wins} –ø–æ–±–µ–¥ –∏–∑ {am_pars} –ë–∞—Ç—Ç–ª–æ–≤\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} (–í–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º)\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile')
                elif message.text == '–ê–∫—Ç–∏–≤–Ω—ã–µ –ë–∞—Ç—Ç–ª—ã':
                    flag = is_profile_exists(message)
                    if flag:
                        show_next_battle(chat_id,user_id)
                elif message.text == '–ü—Ä–∏–Ω—è—Ç—å –£—á–∞—Å—Ç–∏–µ':
                    join_battle(message)
                elif message.text == '–¢–æ–ø 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
                    top_5_participants(message)
                elif message.text == '–ó–∞–∫—Ä—ã—Ç—å':
                    if user_id in payloads_ids:
                        bot.delete_message(chat_id, payloads_ids[user_id])
                        payloads_ids.pop(user_id, None)
                        bot.send_message(chat_id, "–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–∫—Ä—ã—Ç—ã, –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π\n–ö–æ–º–∞–Ω–¥–∞ /pay",reply_markup=start_menu)
                    else:
                        bot.send_message(chat_id, f'–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π', reply_markup=start_menu)
                elif message.text == '–Ø –æ–ø–ª–∞—á—É –æ—Ç–∫—Ä—ã—Ç—ã–π —Å—á–µ—Ç':
                    bot.send_message(chat_id, f'–•–æ—Ä–æ—à–æ, –æ–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—ã', reply_markup=start_menu, reply_to_message_id=payloads_ids[user_id])    
                elif message.text == '–ú–æ–∏ –ë–∞—Ç—Ç–ª—ã':
                    clear_evaluations_if_needed()
                    if is_profile_exists(message):
                        my_battles(message)
                elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è':
                    bot.send_message(chat_id, "–í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é", reply_markup=markup_settings)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ\n\n–ß—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_profile", reply_markup=markup_change_anket)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è",reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, get_name, 1)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥",reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, get_city, 1)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, get_age, 1)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç",reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, get_pref_age, 1)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª",reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, get_gender, 1)
                elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ":
                    if is_profile_exists(message):
                        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ",reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, get_photo, 1)
                elif message.text == "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
                    bot.send_message(user_id, f'–í—ã –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', reply_markup = markup_referals)
                elif message.text == "üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
                    referral_link = f"https://t.me/twinkl_datebot?start={user_id}"
                    bot.send_message(user_id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}", reply_markup=markup_referals)
                elif message.text == "üî¢–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤":
                        all_amount = conn.execute("SELECT COUNT(*) FROM referrals WHERE user_id = ?", (user_id,))
                        all_amount = all_amount.fetchone()[0]
                        avaliable_amount = conn.execute("SELECT referral_count FROM referral_rewards WHERE user_id = ?", (user_id,)).fetchone()
                        avaliable_amount = avaliable_amount[0] if avaliable_amount else 0
                        bot.send_message(user_id, f"–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {all_amount}\n–ò–∑ –Ω–∏—Ö –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –Ω–∞–≥—Ä–∞–¥—ã: {avaliable_amount} ", reply_markup=markup_referals)
                elif message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
                    bot.send_message(chat_id, f'–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /pay')
                elif message.text == "üèÜ–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã":
                    cursor = conn.execute("SELECT referral_count FROM referral_rewards WHERE user_id = ?", (user_id,))
                    row = cursor.fetchone()
                    referral_count = row[0] if row else 0
                    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –Ω–∞–≥—Ä–∞–¥
                    rewards_menu = types.InlineKeyboardMarkup()
                    rewards_text = f"–£ –≤–∞—Å {referral_count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:\n"
                    rewards_menu.add(types.InlineKeyboardButton("‚ô•Ô∏è–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∞–π–∫ = 3 —Ä–µ—Ñ.", callback_data="reward_like"))
                    rewards_menu.add(types.InlineKeyboardButton("üí∏–ü–æ–ª—É—á–∏—Ç—å 300‚ÇΩ = 100 —Ä–µ—Ñ.", callback_data="reward_cash"))
                    rewards_menu.add(types.InlineKeyboardButton("‚ûï–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë", callback_data="invite_more"))
                    bot.send_message(user_id, rewards_text, reply_markup=rewards_menu)
                else:
                    if not(user_id in verif_codes and message.text == verif_codes[user_id]):
                        if user_id != 671084247 and user_id != 7515729537:
                            bot.send_message(chat_id, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞.',reply_markup=start_menu)
                        else:
                            txt = message.text
                            if txt.startswith('ban '):
                                id_ban = txt.split()[1]
                                with conn:
                                    conn.execute('UPDATE user_profiles SET status_ban = ?, photo = ? WHERE user_id = ?', ('banned', None, id_ban))
                                bot.send_message(id_ban, f'–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–ª–∏ –∫—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω –ø–∏—à–∏—Ç–µ @help_username_bot')
                                bot.send_message(user_id, '–∑–∞–±–∞–Ω–∏–ª–∏')
                            elif txt.startswith('unban '):
                                id_ban = txt.split()[1]
                                with conn:
                                    conn.execute('UPDATE user_profiles SET status_ban = ? WHERE user_id = ?', ('norm', id_ban),)
                                bot.send_message(id_ban, f'–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã. –í–ø—Ä–µ–¥—å –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞.')
                                bot.send_message(user_id,'—Ä–∞–∑–±–∞–Ω–∏–ª–∏')
                            elif txt.startswith('verif '):
                                id_verif, email_verif = txt.split()[1], txt.split()[2]
                                with conn:
                                    conn.execute('UPDATE user_profiles SET email = ? WHERE user_id = ?', (email_verif, id_verif),)
                                bot.send_message(user_id, '–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏')
                                bot.send_message(id_verif, '–¢–µ–ø–µ—Ä—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –•–æ—Ä–æ—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!',reply_markup=start_menu)
                                user_states[id_verif] = ''
                            elif txt == '–±–¥':
                                try:
                                    with open('usersDating.db', 'rb') as file:
                                        bot.send_document(user_id, file)
                                except Exception as e:
                                    bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                            elif txt.startswith('–ø–æ–ø–æ–ª–Ω–∏—Ç—å'):
                                id_popln = txt.split()[1]
                                am = txt.split()[2]
                                update_balance(id_popln, am)
                            else:
                                bot.send_message(chat_id, f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞.',reply_markup=start_menu)
                                
        else:
            if not(user_id in user_states and user_states[user_id].startswith('wait code')) and not(user_id in user_states and user_states[user_id] == 'wait email'):
                    bot.send_message(chat_id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /verify')
bot.polling(none_stop=True)
